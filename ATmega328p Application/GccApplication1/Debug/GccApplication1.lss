
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  000023f6  0000248a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d9  00800246  00800246  000025d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000403d  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015bc  00000000  00000000  00006a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024f2  00000000  00000000  00008059  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c20  00000000  00000000  0000a54c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001607  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000390a  00000000  00000000  0000c773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  0001007d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ef       	ldi	r30, 0xF6	; 246
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 34       	cpi	r26, 0x46	; 70
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a6 e4       	ldi	r26, 0x46	; 70
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 31       	cpi	r26, 0x1F	; 31
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a3 03 	call	0x746	; 0x746 <main>
      9e:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CRC8Calculate>:
    0x9F, 0x8A, 0x8D, 0x84, 0x83, 0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC,
    0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
   };
uint8_t
   CRC8Calculate (const uint8_t *data, int length)
   {
      a6:	ac 01       	movw	r20, r24
    uint8_t crc = 0;
    for (int i = 0; i < length; i++)
      a8:	20 e0       	ldi	r18, 0x00	; 0
      aa:	30 e0       	ldi	r19, 0x00	; 0
    0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
   };
uint8_t
   CRC8Calculate (const uint8_t *data, int length)
   {
    uint8_t crc = 0;
      ac:	80 e0       	ldi	r24, 0x00	; 0
    for (int i = 0; i < length; i++)
      ae:	0c c0       	rjmp	.+24     	; 0xc8 <CRC8Calculate+0x22>
          crc = crc8table[data[i] ^ crc];
      b0:	da 01       	movw	r26, r20
      b2:	a2 0f       	add	r26, r18
      b4:	b3 1f       	adc	r27, r19
      b6:	9c 91       	ld	r25, X
      b8:	e8 2f       	mov	r30, r24
      ba:	e9 27       	eor	r30, r25
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	e9 5d       	subi	r30, 0xD9	; 217
      c0:	fe 4f       	sbci	r31, 0xFE	; 254
      c2:	80 81       	ld	r24, Z
   };
uint8_t
   CRC8Calculate (const uint8_t *data, int length)
   {
    uint8_t crc = 0;
    for (int i = 0; i < length; i++)
      c4:	2f 5f       	subi	r18, 0xFF	; 255
      c6:	3f 4f       	sbci	r19, 0xFF	; 255
      c8:	26 17       	cp	r18, r22
      ca:	37 07       	cpc	r19, r23
      cc:	8c f3       	brlt	.-30     	; 0xb0 <CRC8Calculate+0xa>
          crc = crc8table[data[i] ^ crc];
     return crc;
      ce:	08 95       	ret

000000d0 <initESC_BLHeli>:
static float minOCRB_BLHeli;

/* Function Definitions */
void initESC_BLHeli()
{
    initTimer0(ESC_BLHELI_PWM_FREQ_HZ, ESC_BLHELI_WORKING_MODE);
      d0:	40 e0       	ldi	r20, 0x00	; 0
      d2:	60 ee       	ldi	r22, 0xE0	; 224
      d4:	71 e0       	ldi	r23, 0x01	; 1
      d6:	80 e0       	ldi	r24, 0x00	; 0
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 6e 04 	call	0x8dc	; 0x8dc <initTimer0>
    setDutyCycleTimer0(0);
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	cb 01       	movw	r24, r22
      e4:	0e 94 8c 04 	call	0x918	; 0x918 <setDutyCycleTimer0>
    OCR0A_value = getOCRATimer0();
      e8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <getOCRATimer0>
      ec:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <OCR0A_value>
    float periodMs = (1000 / ESC_BLHELI_PWM_FREQ_HZ);
    maxOCRB_BLHeli = (ESC_BLHELI_MAX_PULSE_WIDTH_MS / periodMs) * OCR0A_value;
      f0:	68 2f       	mov	r22, r24
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
      fc:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <maxOCRB_BLHeli>
     100:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <maxOCRB_BLHeli+0x1>
     104:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <maxOCRB_BLHeli+0x2>
     108:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <maxOCRB_BLHeli+0x3>
    minOCRB_BLHeli = (ESC_BLHELI_MIN_PULSE_WIDTH_MS / periodMs) * OCR0A_value;
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	5f e3       	ldi	r21, 0x3F	; 63
     114:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     118:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <__data_end>
     11c:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <__data_end+0x1>
     120:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <__data_end+0x2>
     124:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <__data_end+0x3>
     128:	08 95       	ret

0000012a <setDutyCycleBLHeli>:
}

void setDutyCycleBLHeli(float voltage)
{
     12a:	8f 92       	push	r8
     12c:	9f 92       	push	r9
     12e:	af 92       	push	r10
     130:	bf 92       	push	r11
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
    float actualOCRB = ((voltage / ESC_BLHELI_MAX_VOLTAGE) * (maxOCRB_BLHeli - minOCRB_BLHeli)) + minOCRB_BLHeli;
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	40 e4       	ldi	r20, 0x40	; 64
     140:	51 e4       	ldi	r21, 0x41	; 65
     142:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divsf3>
     146:	4b 01       	movw	r8, r22
     148:	5c 01       	movw	r10, r24
     14a:	c0 90 46 02 	lds	r12, 0x0246	; 0x800246 <__data_end>
     14e:	d0 90 47 02 	lds	r13, 0x0247	; 0x800247 <__data_end+0x1>
     152:	e0 90 48 02 	lds	r14, 0x0248	; 0x800248 <__data_end+0x2>
     156:	f0 90 49 02 	lds	r15, 0x0249	; 0x800249 <__data_end+0x3>
     15a:	a7 01       	movw	r20, r14
     15c:	96 01       	movw	r18, r12
     15e:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <maxOCRB_BLHeli>
     162:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <maxOCRB_BLHeli+0x1>
     166:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <maxOCRB_BLHeli+0x2>
     16a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <maxOCRB_BLHeli+0x3>
     16e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__subsf3>
     172:	9b 01       	movw	r18, r22
     174:	ac 01       	movw	r20, r24
     176:	c5 01       	movw	r24, r10
     178:	b4 01       	movw	r22, r8
     17a:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     17e:	9b 01       	movw	r18, r22
     180:	ac 01       	movw	r20, r24
     182:	c7 01       	movw	r24, r14
     184:	b6 01       	movw	r22, r12
     186:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__addsf3>
     18a:	6b 01       	movw	r12, r22
     18c:	7c 01       	movw	r14, r24
    setDutyCycleTimer0((actualOCRB / OCR0A_value) * 100);
     18e:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <OCR0A_value>
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
     19c:	9b 01       	movw	r18, r22
     19e:	ac 01       	movw	r20, r24
     1a0:	c7 01       	movw	r24, r14
     1a2:	b6 01       	movw	r22, r12
     1a4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divsf3>
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	48 ec       	ldi	r20, 0xC8	; 200
     1ae:	52 e4       	ldi	r21, 0x42	; 66
     1b0:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     1b4:	0e 94 8c 04 	call	0x918	; 0x918 <setDutyCycleTimer0>
     1b8:	ff 90       	pop	r15
     1ba:	ef 90       	pop	r14
     1bc:	df 90       	pop	r13
     1be:	cf 90       	pop	r12
     1c0:	bf 90       	pop	r11
     1c2:	af 90       	pop	r10
     1c4:	9f 90       	pop	r9
     1c6:	8f 90       	pop	r8
     1c8:	08 95       	ret

000001ca <initESC_SimonK>:
static float minOCRB_SimonK;

/* Function Definitions */
void initESC_SimonK()
{
    initTimer2(ESC_SIMONK_PWM_FREQ_HZ, ESC_SIMONK_WORKING_MODE);
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	64 ef       	ldi	r22, 0xF4	; 244
     1ce:	71 e0       	ldi	r23, 0x01	; 1
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <initTimer2>
    setDutyCycleTimer2(0);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	cb 01       	movw	r24, r22
     1de:	0e 94 dd 05 	call	0xbba	; 0xbba <setDutyCycleTimer2>
    OCR2A_value = getOCRATimer2();
     1e2:	0e 94 b4 05 	call	0xb68	; 0xb68 <getOCRATimer2>
     1e6:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <OCR2A_value>
    float periodMs = (1000 / ESC_SIMONK_PWM_FREQ_HZ);
    maxOCRB_SimonK = (ESC_SIMONK_MAX_PULSE_WIDTH_MS / periodMs) * OCR2A_value;
     1ea:	68 2f       	mov	r22, r24
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
     1f6:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <maxOCRB_SimonK>
     1fa:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <maxOCRB_SimonK+0x1>
     1fe:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <maxOCRB_SimonK+0x2>
     202:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <maxOCRB_SimonK+0x3>
    minOCRB_SimonK = (ESC_SIMONK_MIN_PULSE_WIDTH_MS / periodMs) * OCR2A_value;
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	5f e3       	ldi	r21, 0x3F	; 63
     20e:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     212:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <minOCRB_SimonK>
     216:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <minOCRB_SimonK+0x1>
     21a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <minOCRB_SimonK+0x2>
     21e:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <minOCRB_SimonK+0x3>
     222:	08 95       	ret

00000224 <setDutyCycleSimonK>:
}

void setDutyCycleSimonK(float voltage)
{
     224:	8f 92       	push	r8
     226:	9f 92       	push	r9
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
    float actualOCRB = ((voltage / ESC_SIMONK_MAX_VOLTAGE) * (maxOCRB_SimonK - minOCRB_SimonK)) + minOCRB_SimonK;
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e4       	ldi	r20, 0x40	; 64
     23a:	51 e4       	ldi	r21, 0x41	; 65
     23c:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divsf3>
     240:	4b 01       	movw	r8, r22
     242:	5c 01       	movw	r10, r24
     244:	c0 90 4f 02 	lds	r12, 0x024F	; 0x80024f <minOCRB_SimonK>
     248:	d0 90 50 02 	lds	r13, 0x0250	; 0x800250 <minOCRB_SimonK+0x1>
     24c:	e0 90 51 02 	lds	r14, 0x0251	; 0x800251 <minOCRB_SimonK+0x2>
     250:	f0 90 52 02 	lds	r15, 0x0252	; 0x800252 <minOCRB_SimonK+0x3>
     254:	a7 01       	movw	r20, r14
     256:	96 01       	movw	r18, r12
     258:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <maxOCRB_SimonK>
     25c:	70 91 54 02 	lds	r23, 0x0254	; 0x800254 <maxOCRB_SimonK+0x1>
     260:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <maxOCRB_SimonK+0x2>
     264:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <maxOCRB_SimonK+0x3>
     268:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__subsf3>
     26c:	9b 01       	movw	r18, r22
     26e:	ac 01       	movw	r20, r24
     270:	c5 01       	movw	r24, r10
     272:	b4 01       	movw	r22, r8
     274:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     278:	9b 01       	movw	r18, r22
     27a:	ac 01       	movw	r20, r24
     27c:	c7 01       	movw	r24, r14
     27e:	b6 01       	movw	r22, r12
     280:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__addsf3>
     284:	6b 01       	movw	r12, r22
     286:	7c 01       	movw	r14, r24
    setDutyCycleTimer2((actualOCRB / OCR2A_value) * 100);
     288:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <OCR2A_value>
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
     296:	9b 01       	movw	r18, r22
     298:	ac 01       	movw	r20, r24
     29a:	c7 01       	movw	r24, r14
     29c:	b6 01       	movw	r22, r12
     29e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divsf3>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	48 ec       	ldi	r20, 0xC8	; 200
     2a8:	52 e4       	ldi	r21, 0x42	; 66
     2aa:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     2ae:	0e 94 dd 05 	call	0xbba	; 0xbba <setDutyCycleTimer2>
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	bf 90       	pop	r11
     2bc:	af 90       	pop	r10
     2be:	9f 90       	pop	r9
     2c0:	8f 90       	pop	r8
     2c2:	08 95       	ret

000002c4 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     2ca:	0e 94 3f 0b 	call	0x167e	; 0x167e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     2ce:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <xNextFreeByte>
     2d2:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <xNextFreeByte+0x1>
     2d6:	c9 01       	movw	r24, r18
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	80 32       	cpi	r24, 0x20	; 32
     2de:	43 e0       	ldi	r20, 0x03	; 3
     2e0:	94 07       	cpc	r25, r20
     2e2:	58 f4       	brcc	.+22     	; 0x2fa <pvPortMalloc+0x36>
     2e4:	28 17       	cp	r18, r24
     2e6:	39 07       	cpc	r19, r25
     2e8:	58 f4       	brcc	.+22     	; 0x300 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     2ea:	e9 01       	movw	r28, r18
     2ec:	c6 5a       	subi	r28, 0xA6	; 166
     2ee:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
     2f0:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <xNextFreeByte+0x1>
     2f4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <xNextFreeByte>
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     2fa:	c0 e0       	ldi	r28, 0x00	; 0
     2fc:	d0 e0       	ldi	r29, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <pvPortMalloc+0x40>
     300:	c0 e0       	ldi	r28, 0x00	; 0
     302:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     304:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     308:	ce 01       	movw	r24, r28
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     310:	08 95       	ret

00000312 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     312:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     314:	03 96       	adiw	r24, 0x03	; 3
     316:	92 83       	std	Z+2, r25	; 0x02
     318:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	3f ef       	ldi	r19, 0xFF	; 255
     31e:	34 83       	std	Z+4, r19	; 0x04
     320:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     322:	96 83       	std	Z+6, r25	; 0x06
     324:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     326:	90 87       	std	Z+8, r25	; 0x08
     328:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     32a:	10 82       	st	Z, r1
     32c:	08 95       	ret

0000032e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     32e:	fc 01       	movw	r30, r24
     330:	11 86       	std	Z+9, r1	; 0x09
     332:	10 86       	std	Z+8, r1	; 0x08
     334:	08 95       	ret

00000336 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	9c 01       	movw	r18, r24
     33c:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     33e:	dc 01       	movw	r26, r24
     340:	11 96       	adiw	r26, 0x01	; 1
     342:	cd 91       	ld	r28, X+
     344:	dc 91       	ld	r29, X
     346:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     348:	d3 83       	std	Z+3, r29	; 0x03
     34a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     34c:	8c 81       	ldd	r24, Y+4	; 0x04
     34e:	9d 81       	ldd	r25, Y+5	; 0x05
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     354:	8c 81       	ldd	r24, Y+4	; 0x04
     356:	9d 81       	ldd	r25, Y+5	; 0x05
     358:	dc 01       	movw	r26, r24
     35a:	13 96       	adiw	r26, 0x03	; 3
     35c:	7c 93       	st	X, r23
     35e:	6e 93       	st	-X, r22
     360:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     362:	7d 83       	std	Y+5, r23	; 0x05
     364:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     366:	31 87       	std	Z+9, r19	; 0x09
     368:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     36a:	f9 01       	movw	r30, r18
     36c:	80 81       	ld	r24, Z
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	80 83       	st	Z, r24
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     37e:	48 81       	ld	r20, Y
     380:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     382:	4f 3f       	cpi	r20, 0xFF	; 255
     384:	2f ef       	ldi	r18, 0xFF	; 255
     386:	52 07       	cpc	r21, r18
     388:	21 f4       	brne	.+8      	; 0x392 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     38a:	fc 01       	movw	r30, r24
     38c:	a7 81       	ldd	r26, Z+7	; 0x07
     38e:	b0 85       	ldd	r27, Z+8	; 0x08
     390:	0d c0       	rjmp	.+26     	; 0x3ac <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     392:	dc 01       	movw	r26, r24
     394:	13 96       	adiw	r26, 0x03	; 3
     396:	01 c0       	rjmp	.+2      	; 0x39a <vListInsert+0x22>
     398:	df 01       	movw	r26, r30
     39a:	12 96       	adiw	r26, 0x02	; 2
     39c:	ed 91       	ld	r30, X+
     39e:	fc 91       	ld	r31, X
     3a0:	13 97       	sbiw	r26, 0x03	; 3
     3a2:	20 81       	ld	r18, Z
     3a4:	31 81       	ldd	r19, Z+1	; 0x01
     3a6:	42 17       	cp	r20, r18
     3a8:	53 07       	cpc	r21, r19
     3aa:	b0 f7       	brcc	.-20     	; 0x398 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     3ac:	12 96       	adiw	r26, 0x02	; 2
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	13 97       	sbiw	r26, 0x03	; 3
     3b4:	fb 83       	std	Y+3, r31	; 0x03
     3b6:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     3b8:	d5 83       	std	Z+5, r29	; 0x05
     3ba:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     3bc:	bd 83       	std	Y+5, r27	; 0x05
     3be:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     3c0:	13 96       	adiw	r26, 0x03	; 3
     3c2:	dc 93       	st	X, r29
     3c4:	ce 93       	st	-X, r28
     3c6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     3c8:	99 87       	std	Y+9, r25	; 0x09
     3ca:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 81       	ld	r18, Z
     3d0:	2f 5f       	subi	r18, 0xFF	; 255
     3d2:	20 83       	st	Z, r18
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     3e0:	a0 85       	ldd	r26, Z+8	; 0x08
     3e2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     3e4:	c2 81       	ldd	r28, Z+2	; 0x02
     3e6:	d3 81       	ldd	r29, Z+3	; 0x03
     3e8:	84 81       	ldd	r24, Z+4	; 0x04
     3ea:	95 81       	ldd	r25, Z+5	; 0x05
     3ec:	9d 83       	std	Y+5, r25	; 0x05
     3ee:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     3f0:	c4 81       	ldd	r28, Z+4	; 0x04
     3f2:	d5 81       	ldd	r29, Z+5	; 0x05
     3f4:	82 81       	ldd	r24, Z+2	; 0x02
     3f6:	93 81       	ldd	r25, Z+3	; 0x03
     3f8:	9b 83       	std	Y+3, r25	; 0x03
     3fa:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	8d 91       	ld	r24, X+
     400:	9c 91       	ld	r25, X
     402:	12 97       	sbiw	r26, 0x02	; 2
     404:	e8 17       	cp	r30, r24
     406:	f9 07       	cpc	r31, r25
     408:	31 f4       	brne	.+12     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     40a:	84 81       	ldd	r24, Z+4	; 0x04
     40c:	95 81       	ldd	r25, Z+5	; 0x05
     40e:	12 96       	adiw	r26, 0x02	; 2
     410:	9c 93       	st	X, r25
     412:	8e 93       	st	-X, r24
     414:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     416:	11 86       	std	Z+9, r1	; 0x09
     418:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     41a:	8c 91       	ld	r24, X
     41c:	81 50       	subi	r24, 0x01	; 1
     41e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     420:	8c 91       	ld	r24, X
}
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <initialize_LPC>:
    }
}

uint8_t get_current_mode(){
    return mode;
}
     428:	0e 94 99 07 	call	0xf32	; 0xf32 <spiSetSlave>
     42c:	08 95       	ret

0000042e <get_msg_id>:
     42e:	86 95       	lsr	r24
     430:	86 95       	lsr	r24
     432:	87 70       	andi	r24, 0x07	; 7
     434:	08 95       	ret

00000436 <get_msg_length>:
     436:	88 23       	and	r24, r24
     438:	21 f0       	breq	.+8      	; 0x442 <get_msg_length+0xc>
     43a:	84 50       	subi	r24, 0x04	; 4
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	18 f4       	brcc	.+6      	; 0x446 <get_msg_length+0x10>
     440:	04 c0       	rjmp	.+8      	; 0x44a <get_msg_length+0x14>
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	08 95       	ret
     446:	88 e0       	ldi	r24, 0x08	; 8
     448:	08 95       	ret
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	08 95       	ret

0000044e <send_ACK>:
     44e:	80 e1       	ldi	r24, 0x10	; 16
     450:	0e 94 b3 07 	call	0xf66	; 0xf66 <spiSendSlave>
     454:	0e 94 b8 07 	call	0xf70	; 0xf70 <spiReceiveSlave>
     458:	08 95       	ret

0000045a <send_NACK>:
     45a:	84 e1       	ldi	r24, 0x14	; 20
     45c:	0e 94 b3 07 	call	0xf66	; 0xf66 <spiSendSlave>
     460:	08 95       	ret

00000462 <compare_crc8>:
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	8c 01       	movw	r16, r24
     46c:	c6 2f       	mov	r28, r22
     46e:	d0 e0       	ldi	r29, 0x00	; 0
     470:	be 01       	movw	r22, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC8Calculate>
     478:	21 96       	adiw	r28, 0x01	; 1
     47a:	c0 0f       	add	r28, r16
     47c:	d1 1f       	adc	r29, r17
     47e:	98 81       	ld	r25, Y
     480:	89 13       	cpse	r24, r25
     482:	02 c0       	rjmp	.+4      	; 0x488 <compare_crc8+0x26>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	01 c0       	rjmp	.+2      	; 0x48a <compare_crc8+0x28>
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <LPC_decode>:
     494:	62 30       	cpi	r22, 0x02	; 2
     496:	f1 f1       	breq	.+124    	; 0x514 <LPC_decode+0x80>
     498:	28 f4       	brcc	.+10     	; 0x4a4 <LPC_decode+0x10>
     49a:	66 23       	and	r22, r22
     49c:	61 f0       	breq	.+24     	; 0x4b6 <LPC_decode+0x22>
     49e:	61 30       	cpi	r22, 0x01	; 1
     4a0:	29 f1       	breq	.+74     	; 0x4ec <LPC_decode+0x58>
     4a2:	5b c0       	rjmp	.+182    	; 0x55a <LPC_decode+0xc6>
     4a4:	64 30       	cpi	r22, 0x04	; 4
     4a6:	09 f4       	brne	.+2      	; 0x4aa <LPC_decode+0x16>
     4a8:	50 c0       	rjmp	.+160    	; 0x54a <LPC_decode+0xb6>
     4aa:	08 f4       	brcc	.+2      	; 0x4ae <LPC_decode+0x1a>
     4ac:	47 c0       	rjmp	.+142    	; 0x53c <LPC_decode+0xa8>
     4ae:	65 30       	cpi	r22, 0x05	; 5
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <LPC_decode+0x20>
     4b2:	4f c0       	rjmp	.+158    	; 0x552 <LPC_decode+0xbe>
     4b4:	52 c0       	rjmp	.+164    	; 0x55a <LPC_decode+0xc6>
     4b6:	fc 01       	movw	r30, r24
     4b8:	24 81       	ldd	r18, Z+4	; 0x04
     4ba:	2f 33       	cpi	r18, 0x3F	; 63
     4bc:	21 f4       	brne	.+8      	; 0x4c6 <LPC_decode+0x32>
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	20 93 82 05 	sts	0x0582, r18	; 0x800582 <mode>
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <LPC_decode+0x36>
     4c6:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <mode>
     4ca:	0e 94 70 11 	call	0x22e0	; 0x22e0 <free>
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	08 95       	ret
     4d2:	24 2f       	mov	r18, r20
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	f9 01       	movw	r30, r18
     4d8:	31 96       	adiw	r30, 0x01	; 1
     4da:	e8 0f       	add	r30, r24
     4dc:	f9 1f       	adc	r31, r25
     4de:	50 81       	ld	r21, Z
     4e0:	f9 01       	movw	r30, r18
     4e2:	e6 58       	subi	r30, 0x86	; 134
     4e4:	fa 4f       	sbci	r31, 0xFA	; 250
     4e6:	50 83       	st	Z, r21
     4e8:	4f 5f       	subi	r20, 0xFF	; 255
     4ea:	01 c0       	rjmp	.+2      	; 0x4ee <LPC_decode+0x5a>
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	48 30       	cpi	r20, 0x08	; 8
     4f0:	80 f3       	brcs	.-32     	; 0x4d2 <LPC_decode+0x3e>
     4f2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <free>
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	08 95       	ret
     4fa:	24 2f       	mov	r18, r20
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	f9 01       	movw	r30, r18
     500:	31 96       	adiw	r30, 0x01	; 1
     502:	e8 0f       	add	r30, r24
     504:	f9 1f       	adc	r31, r25
     506:	50 81       	ld	r21, Z
     508:	f9 01       	movw	r30, r18
     50a:	e6 58       	subi	r30, 0x86	; 134
     50c:	fa 4f       	sbci	r31, 0xFA	; 250
     50e:	50 83       	st	Z, r21
     510:	4f 5f       	subi	r20, 0xFF	; 255
     512:	01 c0       	rjmp	.+2      	; 0x516 <LPC_decode+0x82>
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	48 30       	cpi	r20, 0x08	; 8
     518:	80 f3       	brcs	.-32     	; 0x4fa <LPC_decode+0x66>
     51a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <free>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	08 95       	ret
     522:	24 2f       	mov	r18, r20
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	f9 01       	movw	r30, r18
     528:	31 96       	adiw	r30, 0x01	; 1
     52a:	e8 0f       	add	r30, r24
     52c:	f9 1f       	adc	r31, r25
     52e:	50 81       	ld	r21, Z
     530:	f9 01       	movw	r30, r18
     532:	e6 58       	subi	r30, 0x86	; 134
     534:	fa 4f       	sbci	r31, 0xFA	; 250
     536:	50 83       	st	Z, r21
     538:	4f 5f       	subi	r20, 0xFF	; 255
     53a:	01 c0       	rjmp	.+2      	; 0x53e <LPC_decode+0xaa>
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	48 30       	cpi	r20, 0x08	; 8
     540:	80 f3       	brcs	.-32     	; 0x522 <LPC_decode+0x8e>
     542:	0e 94 70 11 	call	0x22e0	; 0x22e0 <free>
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	08 95       	ret
     54a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <free>
     54e:	84 e0       	ldi	r24, 0x04	; 4
     550:	08 95       	ret
     552:	0e 94 70 11 	call	0x22e0	; 0x22e0 <free>
     556:	85 e0       	ldi	r24, 0x05	; 5
     558:	08 95       	ret
     55a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <free>
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	08 95       	ret

00000562 <get_decoded_data>:

void get_decoded_data(float* output_data){
     562:	dc 01       	movw	r26, r24
    memcpy(output_data,convert_to_float.float_num,8);
     564:	98 e0       	ldi	r25, 0x08	; 8
     566:	ea e7       	ldi	r30, 0x7A	; 122
     568:	f5 e0       	ldi	r31, 0x05	; 5
     56a:	01 90       	ld	r0, Z+
     56c:	0d 92       	st	X+, r0
     56e:	9a 95       	dec	r25
     570:	e1 f7       	brne	.-8      	; 0x56a <get_decoded_data+0x8>
     572:	08 95       	ret

00000574 <recieve_data>:
}

msg_type_t recieve_data(){
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
    uint8_t first_byte = spiReceiveSlave();
     586:	0e 94 b8 07 	call	0xf70	; 0xf70 <spiReceiveSlave>
     58a:	c8 2f       	mov	r28, r24
    uint8_t msg_id = get_msg_id(first_byte);
     58c:	0e 94 17 02 	call	0x42e	; 0x42e <get_msg_id>
     590:	c8 2e       	mov	r12, r24
    uint8_t msg_length = get_msg_length(msg_id);
     592:	0e 94 1b 02 	call	0x436	; 0x436 <get_msg_length>
     596:	b8 2e       	mov	r11, r24
    if(msg_id ==5 )
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	c8 16       	cp	r12, r24
     59c:	69 f1       	breq	.+90     	; 0x5f8 <recieve_data+0x84>
        return MSG_SUCCESS;
    else{
        //uint8_t* p = new uint8_t[sizeof(uint8_t*)*(msg_length+2)];
        uint8_t *p = (uint8_t *)malloc((msg_length + 2) * sizeof(uint8_t));
     59e:	eb 2c       	mov	r14, r11
     5a0:	f1 2c       	mov	r15, r1
     5a2:	c7 01       	movw	r24, r14
     5a4:	02 96       	adiw	r24, 0x02	; 2
     5a6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <malloc>
     5aa:	8c 01       	movw	r16, r24
        *p = (first_byte);
     5ac:	fc 01       	movw	r30, r24
     5ae:	c0 83       	st	Z, r28
        for(uint8_t i=0;i<msg_length+1;i++)
     5b0:	d1 2c       	mov	r13, r1
     5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <recieve_data+0x52>
            *(p+1+i)=spiReceiveSlave();
     5b4:	cd 2d       	mov	r28, r13
     5b6:	d0 e0       	ldi	r29, 0x00	; 0
     5b8:	21 96       	adiw	r28, 0x01	; 1
     5ba:	c0 0f       	add	r28, r16
     5bc:	d1 1f       	adc	r29, r17
     5be:	0e 94 b8 07 	call	0xf70	; 0xf70 <spiReceiveSlave>
     5c2:	88 83       	st	Y, r24
        return MSG_SUCCESS;
    else{
        //uint8_t* p = new uint8_t[sizeof(uint8_t*)*(msg_length+2)];
        uint8_t *p = (uint8_t *)malloc((msg_length + 2) * sizeof(uint8_t));
        *p = (first_byte);
        for(uint8_t i=0;i<msg_length+1;i++)
     5c4:	d3 94       	inc	r13
     5c6:	8d 2d       	mov	r24, r13
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	97 01       	movw	r18, r14
     5cc:	2f 5f       	subi	r18, 0xFF	; 255
     5ce:	3f 4f       	sbci	r19, 0xFF	; 255
     5d0:	82 17       	cp	r24, r18
     5d2:	93 07       	cpc	r25, r19
     5d4:	7c f3       	brlt	.-34     	; 0x5b4 <recieve_data+0x40>
            *(p+1+i)=spiReceiveSlave();
        if(!(compare_crc8(p,msg_length))){
     5d6:	6b 2d       	mov	r22, r11
     5d8:	c8 01       	movw	r24, r16
     5da:	0e 94 31 02 	call	0x462	; 0x462 <compare_crc8>
     5de:	81 11       	cpse	r24, r1
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <recieve_data+0x76>
            send_NACK();
     5e2:	0e 94 2d 02 	call	0x45a	; 0x45a <send_NACK>
            return MSG_FAILURE;
     5e6:	86 e0       	ldi	r24, 0x06	; 6
     5e8:	08 c0       	rjmp	.+16     	; 0x5fa <recieve_data+0x86>
        }
        send_ACK();
     5ea:	0e 94 27 02 	call	0x44e	; 0x44e <send_ACK>
        return LPC_decode(p,msg_id);
     5ee:	6c 2d       	mov	r22, r12
     5f0:	c8 01       	movw	r24, r16
     5f2:	0e 94 4a 02 	call	0x494	; 0x494 <LPC_decode>
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <recieve_data+0x86>
msg_type_t recieve_data(){
    uint8_t first_byte = spiReceiveSlave();
    uint8_t msg_id = get_msg_id(first_byte);
    uint8_t msg_length = get_msg_length(msg_id);
    if(msg_id ==5 )
        return MSG_SUCCESS;
     5f8:	87 e0       	ldi	r24, 0x07	; 7
            return MSG_FAILURE;
        }
        send_ACK();
        return LPC_decode(p,msg_id);
    }
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	08 95       	ret

0000060e <stateFeedbackControllerTask>:
float ESCValues[2];
TaskHandle_t controllerTaskHandle;

void stateFeedbackControllerTask(void *pvParameters)
{
	vTaskDelay(pdMS_TO_TICKS(8000));
     60e:	8b e1       	ldi	r24, 0x1B	; 27
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 c5 0c 	call	0x198a	; 0x198a <vTaskDelay>
	while(1)
	{
		xTaskNotifyWait(0, 0xffffffff, NULL, portMAX_DELAY);
     616:	cc 24       	eor	r12, r12
     618:	ca 94       	dec	r12
     61a:	dc 2c       	mov	r13, r12
     61c:	e1 2c       	mov	r14, r1
     61e:	f1 2c       	mov	r15, r1
     620:	0f ef       	ldi	r16, 0xFF	; 255
     622:	1f ef       	ldi	r17, 0xFF	; 255
     624:	98 01       	movw	r18, r16
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	ba 01       	movw	r22, r20
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <xTaskGenericNotifyWait>
		xTaskNotifyWait(0, 0xffffffff, NULL, portMAX_DELAY);
     632:	0f ef       	ldi	r16, 0xFF	; 255
     634:	1f ef       	ldi	r17, 0xFF	; 255
     636:	98 01       	movw	r18, r16
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	ba 01       	movw	r22, r20
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <xTaskGenericNotifyWait>
		updateController(stateVector, ESCValues);
     644:	69 ef       	ldi	r22, 0xF9	; 249
     646:	75 e0       	ldi	r23, 0x05	; 5
     648:	81 ee       	ldi	r24, 0xE1	; 225
     64a:	95 e0       	ldi	r25, 0x05	; 5
     64c:	0e 94 c5 08 	call	0x118a	; 0x118a <updateController>
		setDutyCycleSimonK(ESCValues[1]);
     650:	c9 ef       	ldi	r28, 0xF9	; 249
     652:	d5 e0       	ldi	r29, 0x05	; 5
     654:	6c 81       	ldd	r22, Y+4	; 0x04
     656:	7d 81       	ldd	r23, Y+5	; 0x05
     658:	8e 81       	ldd	r24, Y+6	; 0x06
     65a:	9f 81       	ldd	r25, Y+7	; 0x07
     65c:	0e 94 12 01 	call	0x224	; 0x224 <setDutyCycleSimonK>
		setDutyCycleBLHeli(ESCValues[0]);
     660:	68 81       	ld	r22, Y
     662:	79 81       	ldd	r23, Y+1	; 0x01
     664:	8a 81       	ldd	r24, Y+2	; 0x02
     666:	9b 81       	ldd	r25, Y+3	; 0x03
     668:	0e 94 95 00 	call	0x12a	; 0x12a <setDutyCycleBLHeli>
     66c:	d4 cf       	rjmp	.-88     	; 0x616 <stateFeedbackControllerTask+0x8>

0000066e <LPCReceiveMessagesTask>:
	}
}

void LPCReceiveMessagesTask(void *pvParameters)
{
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	2a 97       	sbiw	r28, 0x0a	; 10
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
	msg_type_t msgType;
	float outputData[2];
	TickType_t xLastWakeTime = xTaskGetTickCount();
     682:	0e 94 45 0b 	call	0x168a	; 0x168a <xTaskGetTickCount>
     686:	9a 87       	std	Y+10, r25	; 0x0a
     688:	89 87       	std	Y+9, r24	; 0x09
	const uint16_t periodMs = 10;
	while(1)
	{
		msgType = recieve_data();
     68a:	0e 94 ba 02 	call	0x574	; 0x574 <recieve_data>
     68e:	18 2f       	mov	r17, r24
		get_decoded_data(outputData);
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	0e 94 b1 02 	call	0x562	; 0x562 <get_decoded_data>
		switch(msgType)
     698:	11 30       	cpi	r17, 0x01	; 1
     69a:	31 f1       	breq	.+76     	; 0x6e8 <LPCReceiveMessagesTask+0x7a>
     69c:	20 f0       	brcs	.+8      	; 0x6a6 <LPCReceiveMessagesTask+0x38>
     69e:	12 30       	cpi	r17, 0x02	; 2
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <LPCReceiveMessagesTask+0x36>
     6a2:	43 c0       	rjmp	.+134    	; 0x72a <LPCReceiveMessagesTask+0xbc>
     6a4:	46 c0       	rjmp	.+140    	; 0x732 <LPCReceiveMessagesTask+0xc4>
		{
			case MSG_TYPE_PITCH:
			stateVector[0] = outputData[0];
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	9a 81       	ldd	r25, Y+2	; 0x02
     6aa:	ab 81       	ldd	r26, Y+3	; 0x03
     6ac:	bc 81       	ldd	r27, Y+4	; 0x04
     6ae:	e1 ee       	ldi	r30, 0xE1	; 225
     6b0:	f5 e0       	ldi	r31, 0x05	; 5
     6b2:	80 83       	st	Z, r24
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	a2 83       	std	Z+2, r26	; 0x02
     6b8:	b3 83       	std	Z+3, r27	; 0x03
			stateVector[1] = outputData[1];
     6ba:	8d 81       	ldd	r24, Y+5	; 0x05
     6bc:	9e 81       	ldd	r25, Y+6	; 0x06
     6be:	af 81       	ldd	r26, Y+7	; 0x07
     6c0:	b8 85       	ldd	r27, Y+8	; 0x08
     6c2:	84 83       	std	Z+4, r24	; 0x04
     6c4:	95 83       	std	Z+5, r25	; 0x05
     6c6:	a6 83       	std	Z+6, r26	; 0x06
     6c8:	b7 83       	std	Z+7, r27	; 0x07
			xTaskNotify(controllerTaskHandle, ((1 << 0) | (1 << 1)), eSetBits);
     6ca:	e1 2c       	mov	r14, r1
     6cc:	f1 2c       	mov	r15, r1
     6ce:	01 e0       	ldi	r16, 0x01	; 1
     6d0:	23 e0       	ldi	r18, 0x03	; 3
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <controllerTaskHandle>
     6de:	90 91 02 06 	lds	r25, 0x0602	; 0x800602 <controllerTaskHandle+0x1>
     6e2:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskGenericNotify>
			break;
     6e6:	25 c0       	rjmp	.+74     	; 0x732 <LPCReceiveMessagesTask+0xc4>
			case MSG_TYPE_ELEVATION:
			stateVector[2] = outputData[0];
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	ab 81       	ldd	r26, Y+3	; 0x03
     6ee:	bc 81       	ldd	r27, Y+4	; 0x04
     6f0:	e1 ee       	ldi	r30, 0xE1	; 225
     6f2:	f5 e0       	ldi	r31, 0x05	; 5
     6f4:	80 87       	std	Z+8, r24	; 0x08
     6f6:	91 87       	std	Z+9, r25	; 0x09
     6f8:	a2 87       	std	Z+10, r26	; 0x0a
     6fa:	b3 87       	std	Z+11, r27	; 0x0b
			stateVector[3] = outputData[1];
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	af 81       	ldd	r26, Y+7	; 0x07
     702:	b8 85       	ldd	r27, Y+8	; 0x08
     704:	84 87       	std	Z+12, r24	; 0x0c
     706:	95 87       	std	Z+13, r25	; 0x0d
     708:	a6 87       	std	Z+14, r26	; 0x0e
     70a:	b7 87       	std	Z+15, r27	; 0x0f
			xTaskNotify(controllerTaskHandle, ((1 << 2) | (1 << 3)), eSetBits);
     70c:	e1 2c       	mov	r14, r1
     70e:	f1 2c       	mov	r15, r1
     710:	01 e0       	ldi	r16, 0x01	; 1
     712:	2c e0       	ldi	r18, 0x0C	; 12
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	80 91 01 06 	lds	r24, 0x0601	; 0x800601 <controllerTaskHandle>
     720:	90 91 02 06 	lds	r25, 0x0602	; 0x800602 <controllerTaskHandle+0x1>
     724:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <xTaskGenericNotify>
			break;
     728:	04 c0       	rjmp	.+8      	; 0x732 <LPCReceiveMessagesTask+0xc4>

			case MSG_TYPE_REFERENCE:
			setReferenceAngles(outputData);
     72a:	ce 01       	movw	r24, r28
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <setReferenceAngles>
			break;
			default: break;
		}
		if(msgType != MSG_FAILURE)
     732:	16 30       	cpi	r17, 0x06	; 6
     734:	09 f4       	brne	.+2      	; 0x738 <LPCReceiveMessagesTask+0xca>
     736:	a9 cf       	rjmp	.-174    	; 0x68a <LPCReceiveMessagesTask+0x1c>
		{
			xTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(periodMs));
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	ce 01       	movw	r24, r28
     73e:	09 96       	adiw	r24, 0x09	; 9
     740:	0e 94 83 0c 	call	0x1906	; 0x1906 <xTaskDelayUntil>
     744:	a2 cf       	rjmp	.-188    	; 0x68a <LPCReceiveMessagesTask+0x1c>

00000746 <main>:
}

int main() {
	
	/* Initialize Both ESCs */
	initESC_BLHeli();
     746:	0e 94 68 00 	call	0xd0	; 0xd0 <initESC_BLHeli>
	initESC_SimonK();
     74a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <initESC_SimonK>

	/* Initialize the LPC messaging protocol and the SPI driver */
	initialize_LPC(LPC_SPI_COMMUNICATION_MODE);
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	0e 94 14 02 	call	0x428	; 0x428 <initialize_LPC>
	
	xTaskCreate(stateFeedbackControllerTask, "SF Control", 256, NULL, tskStateFeedbackController_PRIORITY, &controllerTaskHandle);
     754:	0f 2e       	mov	r0, r31
     756:	f1 e0       	ldi	r31, 0x01	; 1
     758:	ef 2e       	mov	r14, r31
     75a:	f6 e0       	ldi	r31, 0x06	; 6
     75c:	ff 2e       	mov	r15, r31
     75e:	f0 2d       	mov	r31, r0
     760:	02 e0       	ldi	r16, 0x02	; 2
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	51 e0       	ldi	r21, 0x01	; 1
     76a:	67 e2       	ldi	r22, 0x27	; 39
     76c:	72 e0       	ldi	r23, 0x02	; 2
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	0e 94 bf 0a 	call	0x157e	; 0x157e <xTaskCreate>
	xTaskCreate(LPCReceiveMessagesTask, "ReceivingData", 256, NULL, tskLPCReceiveMessage_PRIORITY, NULL);
     776:	e1 2c       	mov	r14, r1
     778:	f1 2c       	mov	r15, r1
     77a:	01 e0       	ldi	r16, 0x01	; 1
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	51 e0       	ldi	r21, 0x01	; 1
     784:	62 e3       	ldi	r22, 0x32	; 50
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	87 e3       	ldi	r24, 0x37	; 55
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 bf 0a 	call	0x157e	; 0x157e <xTaskCreate>
	sei();
     790:	78 94       	sei
	vTaskStartScheduler();
     792:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskStartScheduler>
     796:	ff cf       	rjmp	.-2      	; 0x796 <main+0x50>

00000798 <calcPrescalarTimer0>:
{
    DDRD &= ~(1 << OCR0B_PIN);
    OCR0A = 0;
    OCR0B = 0;
    TCCR0A = 0;
    TCCR0B = 0;
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	6b 01       	movw	r12, r22
     7a2:	7c 01       	movw	r14, r24
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	22 0f       	add	r18, r18
     7aa:	33 1f       	adc	r19, r19
     7ac:	44 1f       	adc	r20, r20
     7ae:	55 1f       	adc	r21, r21
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	74 e2       	ldi	r23, 0x24	; 36
     7b4:	84 ef       	ldi	r24, 0xF4	; 244
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     7bc:	2f 3f       	cpi	r18, 0xFF	; 255
     7be:	31 05       	cpc	r19, r1
     7c0:	41 05       	cpc	r20, r1
     7c2:	51 05       	cpc	r21, r1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <calcPrescalarTimer0+0x30>
     7c6:	18 f4       	brcc	.+6      	; 0x7ce <calcPrescalarTimer0+0x36>
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	85 bd       	out	0x25, r24	; 37
     7cc:	7f c0       	rjmp	.+254    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     7ce:	d7 01       	movw	r26, r14
     7d0:	c6 01       	movw	r24, r12
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	aa 1f       	adc	r26, r26
     7d8:	bb 1f       	adc	r27, r27
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	aa 1f       	adc	r26, r26
     7e0:	bb 1f       	adc	r27, r27
     7e2:	9c 01       	movw	r18, r24
     7e4:	ad 01       	movw	r20, r26
     7e6:	22 0f       	add	r18, r18
     7e8:	33 1f       	adc	r19, r19
     7ea:	44 1f       	adc	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	22 0f       	add	r18, r18
     7f0:	33 1f       	adc	r19, r19
     7f2:	44 1f       	adc	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	74 e2       	ldi	r23, 0x24	; 36
     7fa:	84 ef       	ldi	r24, 0xF4	; 244
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     802:	2f 3f       	cpi	r18, 0xFF	; 255
     804:	31 05       	cpc	r19, r1
     806:	41 05       	cpc	r20, r1
     808:	51 05       	cpc	r21, r1
     80a:	09 f0       	breq	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	18 f4       	brcc	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	85 bd       	out	0x25, r24	; 37
     812:	5c c0       	rjmp	.+184    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     814:	d7 01       	movw	r26, r14
     816:	c6 01       	movw	r24, r12
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	aa 1f       	adc	r26, r26
     81e:	bb 1f       	adc	r27, r27
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	aa 1f       	adc	r26, r26
     826:	bb 1f       	adc	r27, r27
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	aa 1f       	adc	r26, r26
     82e:	bb 1f       	adc	r27, r27
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	aa 1f       	adc	r26, r26
     836:	bb 1f       	adc	r27, r27
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	aa 1f       	adc	r26, r26
     83e:	bb 1f       	adc	r27, r27
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	aa 1f       	adc	r26, r26
     846:	bb 1f       	adc	r27, r27
     848:	9c 01       	movw	r18, r24
     84a:	ad 01       	movw	r20, r26
     84c:	22 0f       	add	r18, r18
     84e:	33 1f       	adc	r19, r19
     850:	44 1f       	adc	r20, r20
     852:	55 1f       	adc	r21, r21
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	74 e2       	ldi	r23, 0x24	; 36
     858:	84 ef       	ldi	r24, 0xF4	; 244
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     860:	2f 3f       	cpi	r18, 0xFF	; 255
     862:	31 05       	cpc	r19, r1
     864:	41 05       	cpc	r20, r1
     866:	51 05       	cpc	r21, r1
     868:	09 f0       	breq	.+2      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     86a:	18 f4       	brcc	.+6      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	85 bd       	out	0x25, r24	; 37
     870:	2d c0       	rjmp	.+90     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	74 e2       	ldi	r23, 0x24	; 36
     876:	84 ef       	ldi	r24, 0xF4	; 244
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a7 01       	movw	r20, r14
     87c:	96 01       	movw	r18, r12
     87e:	01 2e       	mov	r0, r17
     880:	19 e0       	ldi	r17, 0x09	; 9
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	44 1f       	adc	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	1a 95       	dec	r17
     88c:	d1 f7       	brne	.-12     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
     88e:	10 2d       	mov	r17, r0
     890:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     894:	2f 3f       	cpi	r18, 0xFF	; 255
     896:	31 05       	cpc	r19, r1
     898:	41 05       	cpc	r20, r1
     89a:	51 05       	cpc	r21, r1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     89e:	18 f4       	brcc	.+6      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     8a0:	84 e0       	ldi	r24, 0x04	; 4
     8a2:	85 bd       	out	0x25, r24	; 37
     8a4:	13 c0       	rjmp	.+38     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     8a6:	85 e0       	ldi	r24, 0x05	; 5
     8a8:	85 bd       	out	0x25, r24	; 37
     8aa:	a7 01       	movw	r20, r14
     8ac:	96 01       	movw	r18, r12
     8ae:	01 2e       	mov	r0, r17
     8b0:	1b e0       	ldi	r17, 0x0B	; 11
     8b2:	22 0f       	add	r18, r18
     8b4:	33 1f       	adc	r19, r19
     8b6:	44 1f       	adc	r20, r20
     8b8:	55 1f       	adc	r21, r21
     8ba:	1a 95       	dec	r17
     8bc:	d1 f7       	brne	.-12     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     8be:	10 2d       	mov	r17, r0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	74 e2       	ldi	r23, 0x24	; 36
     8c4:	84 ef       	ldi	r24, 0xF4	; 244
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     8cc:	82 2f       	mov	r24, r18
     8ce:	ff 90       	pop	r15
     8d0:	ef 90       	pop	r14
     8d2:	df 90       	pop	r13
     8d4:	cf 90       	pop	r12
     8d6:	08 95       	ret

000008d8 <getOCRATimer0>:
     8d8:	87 b5       	in	r24, 0x27	; 39
     8da:	08 95       	ret

000008dc <initTimer0>:
     8dc:	cf 93       	push	r28
     8de:	6e 31       	cpi	r22, 0x1E	; 30
     8e0:	71 05       	cpc	r23, r1
     8e2:	81 05       	cpc	r24, r1
     8e4:	91 05       	cpc	r25, r1
     8e6:	b0 f0       	brcs	.+44     	; 0x914 <__stack+0x15>
     8e8:	c4 2f       	mov	r28, r20
     8ea:	2a b1       	in	r18, 0x0a	; 10
     8ec:	20 62       	ori	r18, 0x20	; 32
     8ee:	2a b9       	out	0x0a, r18	; 10
     8f0:	0e 94 cc 03 	call	0x798	; 0x798 <calcPrescalarTimer0>
     8f4:	87 bd       	out	0x27, r24	; 39
     8f6:	85 b5       	in	r24, 0x25	; 37
     8f8:	88 60       	ori	r24, 0x08	; 8
     8fa:	85 bd       	out	0x25, r24	; 37
     8fc:	c0 93 83 05 	sts	0x0583, r28	; 0x800583 <currentWorkingMode>
     900:	c1 11       	cpse	r28, r1
     902:	04 c0       	rjmp	.+8      	; 0x90c <__stack+0xd>
     904:	81 e2       	ldi	r24, 0x21	; 33
     906:	84 bd       	out	0x24, r24	; 36
     908:	18 bc       	out	0x28, r1	; 40
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
     90c:	81 e3       	ldi	r24, 0x31	; 49
     90e:	84 bd       	out	0x24, r24	; 36
     910:	87 b5       	in	r24, 0x27	; 39
     912:	88 bd       	out	0x28, r24	; 40
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <setDutyCycleTimer0>:
}

void setDutyCycleTimer0(float dutyCycle)
{
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
    uint8_t OCRB_value;
    float actualOCRB = ((dutyCycle / 100) * OCR0A);
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	48 ec       	ldi	r20, 0xC8	; 200
     926:	52 e4       	ldi	r21, 0x42	; 66
     928:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divsf3>
     92c:	6b 01       	movw	r12, r22
     92e:	7c 01       	movw	r14, r24
     930:	67 b5       	in	r22, 0x27	; 39
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
    if(actualOCRB > OCR0A)
     94c:	67 b5       	in	r22, 0x27	; 39
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
     958:	9b 01       	movw	r18, r22
     95a:	ac 01       	movw	r20, r24
     95c:	c7 01       	movw	r24, r14
     95e:	b6 01       	movw	r22, r12
     960:	0e 94 20 10 	call	0x2040	; 0x2040 <__gesf2>
     964:	18 16       	cp	r1, r24
     966:	1c f4       	brge	.+6      	; 0x96e <setDutyCycleTimer0+0x56>
    {
        OCRB_value = OCR0A - 2;
     968:	67 b5       	in	r22, 0x27	; 39
     96a:	62 50       	subi	r22, 0x02	; 2
     96c:	04 c0       	rjmp	.+8      	; 0x976 <setDutyCycleTimer0+0x5e>
    }
    else
    {
        OCRB_value = ((uint8_t) actualOCRB);
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    }

    if(currentWorkingMode == TIMER0_PWM_NON_INVERTED)
     976:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <currentWorkingMode>
     97a:	81 11       	cpse	r24, r1
     97c:	02 c0       	rjmp	.+4      	; 0x982 <setDutyCycleTimer0+0x6a>
    {
        OCR0B = OCRB_value;
     97e:	68 bd       	out	0x28, r22	; 40
     980:	03 c0       	rjmp	.+6      	; 0x988 <setDutyCycleTimer0+0x70>
    }
    else
    {
        OCR0B = (OCR0A - OCRB_value);
     982:	87 b5       	in	r24, 0x27	; 39
     984:	86 1b       	sub	r24, r22
     986:	88 bd       	out	0x28, r24	; 40
    }
}
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	08 95       	ret

00000992 <calcPrescalarTimer2>:
{
    DDRD &= ~(1 << OCR2B_PIN);
    OCR2A = 0;
    OCR2B = 0;
    TCCR2A = 0;
    TCCR2B = 0;
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	6b 01       	movw	r12, r22
     9a0:	7c 01       	movw	r14, r24
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	22 0f       	add	r18, r18
     9a8:	33 1f       	adc	r19, r19
     9aa:	44 1f       	adc	r20, r20
     9ac:	55 1f       	adc	r21, r21
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	74 e2       	ldi	r23, 0x24	; 36
     9b2:	84 ef       	ldi	r24, 0xF4	; 244
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     9ba:	2f 3f       	cpi	r18, 0xFF	; 255
     9bc:	31 05       	cpc	r19, r1
     9be:	41 05       	cpc	r20, r1
     9c0:	51 05       	cpc	r21, r1
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <calcPrescalarTimer2+0x34>
     9c4:	20 f4       	brcc	.+8      	; 0x9ce <calcPrescalarTimer2+0x3c>
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     9cc:	c5 c0       	rjmp	.+394    	; 0xb58 <calcPrescalarTimer2+0x1c6>
     9ce:	d7 01       	movw	r26, r14
     9d0:	c6 01       	movw	r24, r12
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	aa 1f       	adc	r26, r26
     9d8:	bb 1f       	adc	r27, r27
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	aa 1f       	adc	r26, r26
     9e0:	bb 1f       	adc	r27, r27
     9e2:	9c 01       	movw	r18, r24
     9e4:	ad 01       	movw	r20, r26
     9e6:	22 0f       	add	r18, r18
     9e8:	33 1f       	adc	r19, r19
     9ea:	44 1f       	adc	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	22 0f       	add	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	44 1f       	adc	r20, r20
     9f4:	55 1f       	adc	r21, r21
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	74 e2       	ldi	r23, 0x24	; 36
     9fa:	84 ef       	ldi	r24, 0xF4	; 244
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     a02:	2f 3f       	cpi	r18, 0xFF	; 255
     a04:	31 05       	cpc	r19, r1
     a06:	41 05       	cpc	r20, r1
     a08:	51 05       	cpc	r21, r1
     a0a:	09 f0       	breq	.+2      	; 0xa0e <calcPrescalarTimer2+0x7c>
     a0c:	20 f4       	brcc	.+8      	; 0xa16 <calcPrescalarTimer2+0x84>
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     a14:	a1 c0       	rjmp	.+322    	; 0xb58 <calcPrescalarTimer2+0x1c6>
     a16:	d7 01       	movw	r26, r14
     a18:	c6 01       	movw	r24, r12
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	aa 1f       	adc	r26, r26
     a30:	bb 1f       	adc	r27, r27
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	aa 1f       	adc	r26, r26
     a38:	bb 1f       	adc	r27, r27
     a3a:	9c 01       	movw	r18, r24
     a3c:	ad 01       	movw	r20, r26
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	22 0f       	add	r18, r18
     a48:	33 1f       	adc	r19, r19
     a4a:	44 1f       	adc	r20, r20
     a4c:	55 1f       	adc	r21, r21
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	74 e2       	ldi	r23, 0x24	; 36
     a52:	84 ef       	ldi	r24, 0xF4	; 244
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     a5a:	2f 3f       	cpi	r18, 0xFF	; 255
     a5c:	31 05       	cpc	r19, r1
     a5e:	41 05       	cpc	r20, r1
     a60:	51 05       	cpc	r21, r1
     a62:	09 f0       	breq	.+2      	; 0xa66 <calcPrescalarTimer2+0xd4>
     a64:	20 f4       	brcc	.+8      	; 0xa6e <calcPrescalarTimer2+0xdc>
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     a6c:	75 c0       	rjmp	.+234    	; 0xb58 <calcPrescalarTimer2+0x1c6>
     a6e:	d7 01       	movw	r26, r14
     a70:	c6 01       	movw	r24, r12
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	aa 1f       	adc	r26, r26
     a80:	bb 1f       	adc	r27, r27
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	aa 1f       	adc	r26, r26
     a90:	bb 1f       	adc	r27, r27
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	aa 1f       	adc	r26, r26
     a98:	bb 1f       	adc	r27, r27
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	aa 1f       	adc	r26, r26
     aa0:	bb 1f       	adc	r27, r27
     aa2:	9c 01       	movw	r18, r24
     aa4:	ad 01       	movw	r20, r26
     aa6:	22 0f       	add	r18, r18
     aa8:	33 1f       	adc	r19, r19
     aaa:	44 1f       	adc	r20, r20
     aac:	55 1f       	adc	r21, r21
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	74 e2       	ldi	r23, 0x24	; 36
     ab2:	84 ef       	ldi	r24, 0xF4	; 244
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     aba:	2f 3f       	cpi	r18, 0xFF	; 255
     abc:	31 05       	cpc	r19, r1
     abe:	41 05       	cpc	r20, r1
     ac0:	51 05       	cpc	r21, r1
     ac2:	09 f0       	breq	.+2      	; 0xac6 <calcPrescalarTimer2+0x134>
     ac4:	20 f4       	brcc	.+8      	; 0xace <calcPrescalarTimer2+0x13c>
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     acc:	45 c0       	rjmp	.+138    	; 0xb58 <calcPrescalarTimer2+0x1c6>
     ace:	3e 2d       	mov	r19, r14
     ad0:	2d 2d       	mov	r18, r13
     ad2:	1c 2d       	mov	r17, r12
     ad4:	00 27       	eor	r16, r16
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	74 e2       	ldi	r23, 0x24	; 36
     ada:	84 ef       	ldi	r24, 0xF4	; 244
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a9 01       	movw	r20, r18
     ae0:	98 01       	movw	r18, r16
     ae2:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     ae6:	2f 3f       	cpi	r18, 0xFF	; 255
     ae8:	31 05       	cpc	r19, r1
     aea:	41 05       	cpc	r20, r1
     aec:	51 05       	cpc	r21, r1
     aee:	09 f0       	breq	.+2      	; 0xaf2 <calcPrescalarTimer2+0x160>
     af0:	20 f4       	brcc	.+8      	; 0xafa <calcPrescalarTimer2+0x168>
     af2:	85 e0       	ldi	r24, 0x05	; 5
     af4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     af8:	2f c0       	rjmp	.+94     	; 0xb58 <calcPrescalarTimer2+0x1c6>
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	74 e2       	ldi	r23, 0x24	; 36
     afe:	84 ef       	ldi	r24, 0xF4	; 244
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a7 01       	movw	r20, r14
     b04:	96 01       	movw	r18, r12
     b06:	01 2e       	mov	r0, r17
     b08:	19 e0       	ldi	r17, 0x09	; 9
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	44 1f       	adc	r20, r20
     b10:	55 1f       	adc	r21, r21
     b12:	1a 95       	dec	r17
     b14:	d1 f7       	brne	.-12     	; 0xb0a <calcPrescalarTimer2+0x178>
     b16:	10 2d       	mov	r17, r0
     b18:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     b1c:	2f 3f       	cpi	r18, 0xFF	; 255
     b1e:	31 05       	cpc	r19, r1
     b20:	41 05       	cpc	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	09 f0       	breq	.+2      	; 0xb28 <calcPrescalarTimer2+0x196>
     b26:	20 f4       	brcc	.+8      	; 0xb30 <calcPrescalarTimer2+0x19e>
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     b2e:	14 c0       	rjmp	.+40     	; 0xb58 <calcPrescalarTimer2+0x1c6>
     b30:	87 e0       	ldi	r24, 0x07	; 7
     b32:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     b36:	a7 01       	movw	r20, r14
     b38:	96 01       	movw	r18, r12
     b3a:	01 2e       	mov	r0, r17
     b3c:	1b e0       	ldi	r17, 0x0B	; 11
     b3e:	22 0f       	add	r18, r18
     b40:	33 1f       	adc	r19, r19
     b42:	44 1f       	adc	r20, r20
     b44:	55 1f       	adc	r21, r21
     b46:	1a 95       	dec	r17
     b48:	d1 f7       	brne	.-12     	; 0xb3e <calcPrescalarTimer2+0x1ac>
     b4a:	10 2d       	mov	r17, r0
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	74 e2       	ldi	r23, 0x24	; 36
     b50:	84 ef       	ldi	r24, 0xF4	; 244
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodsi4>
     b58:	82 2f       	mov	r24, r18
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	08 95       	ret

00000b68 <getOCRATimer2>:
     b68:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b6c:	08 95       	ret

00000b6e <initTimer2>:
     b6e:	cf 93       	push	r28
     b70:	6e 31       	cpi	r22, 0x1E	; 30
     b72:	71 05       	cpc	r23, r1
     b74:	81 05       	cpc	r24, r1
     b76:	91 05       	cpc	r25, r1
     b78:	f0 f0       	brcs	.+60     	; 0xbb6 <initTimer2+0x48>
     b7a:	c4 2f       	mov	r28, r20
     b7c:	2a b1       	in	r18, 0x0a	; 10
     b7e:	28 60       	ori	r18, 0x08	; 8
     b80:	2a b9       	out	0x0a, r18	; 10
     b82:	0e 94 c9 04 	call	0x992	; 0x992 <calcPrescalarTimer2>
     b86:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b8a:	e1 eb       	ldi	r30, 0xB1	; 177
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	80 83       	st	Z, r24
     b94:	c0 93 84 05 	sts	0x0584, r28	; 0x800584 <currentWorkingMode>
     b98:	c1 11       	cpse	r28, r1
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <initTimer2+0x3a>
     b9c:	81 e2       	ldi	r24, 0x21	; 33
     b9e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     ba2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <initTimer2+0x48>
     ba8:	81 e3       	ldi	r24, 0x31	; 49
     baa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     bae:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     bb2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <setDutyCycleTimer2>:
}

void setDutyCycleTimer2(float dutyCycle)
{
     bba:	cf 92       	push	r12
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	6b 01       	movw	r12, r22
     bc8:	7c 01       	movw	r14, r24
    if(dutyCycle > 95)
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	4e eb       	ldi	r20, 0xBE	; 190
     bd0:	52 e4       	ldi	r21, 0x42	; 66
     bd2:	0e 94 20 10 	call	0x2040	; 0x2040 <__gesf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	44 f4       	brge	.+16     	; 0xbea <setDutyCycleTimer2+0x30>
    {
        dutyCycle = 95;
     bda:	0f 2e       	mov	r0, r31
     bdc:	c1 2c       	mov	r12, r1
     bde:	d1 2c       	mov	r13, r1
     be0:	fe eb       	ldi	r31, 0xBE	; 190
     be2:	ef 2e       	mov	r14, r31
     be4:	f2 e4       	ldi	r31, 0x42	; 66
     be6:	ff 2e       	mov	r15, r31
     be8:	f0 2d       	mov	r31, r0
    }
    uint8_t OCRB_value; 
    float actualOCRB = ((dutyCycle / 100) * OCR2A);
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	48 ec       	ldi	r20, 0xC8	; 200
     bf0:	52 e4       	ldi	r21, 0x42	; 66
     bf2:	c7 01       	movw	r24, r14
     bf4:	b6 01       	movw	r22, r12
     bf6:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divsf3>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	c3 eb       	ldi	r28, 0xB3	; 179
     c00:	d0 e0       	ldi	r29, 0x00	; 0
     c02:	68 81       	ld	r22, Y
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
     c0e:	9b 01       	movw	r18, r22
     c10:	ac 01       	movw	r20, r24
     c12:	c7 01       	movw	r24, r14
     c14:	b6 01       	movw	r22, r12
     c16:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24
    if(actualOCRB > OCR2A)
     c1e:	68 81       	ld	r22, Y
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
     c2a:	9b 01       	movw	r18, r22
     c2c:	ac 01       	movw	r20, r24
     c2e:	c7 01       	movw	r24, r14
     c30:	b6 01       	movw	r22, r12
     c32:	0e 94 20 10 	call	0x2040	; 0x2040 <__gesf2>
     c36:	18 16       	cp	r1, r24
     c38:	1c f4       	brge	.+6      	; 0xc40 <setDutyCycleTimer2+0x86>
    {
        OCRB_value = OCR2A;
     c3a:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <setDutyCycleTimer2+0x8e>
    }
    else
    {
        OCRB_value = ((uint8_t) actualOCRB);
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    }

    if(currentWorkingMode == TIMER2_PWM_NON_INVERTED)
     c48:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <currentWorkingMode>
     c4c:	81 11       	cpse	r24, r1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <setDutyCycleTimer2+0x9c>
    {
        OCR2B = OCRB_value;
     c50:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <setDutyCycleTimer2+0xa6>
    }
    else
    {
        OCR2B = (OCR2A - OCRB_value);
     c56:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c5a:	86 1b       	sub	r24, r22
     c5c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    }
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	df 90       	pop	r13
     c6a:	cf 90       	pop	r12
     c6c:	08 95       	ret

00000c6e <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c6e:	84 e0       	ldi	r24, 0x04	; 4
     c70:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c74:	81 ee       	ldi	r24, 0xE1	; 225
     c76:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     c7a:	8b e0       	ldi	r24, 0x0B	; 11
     c7c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c80:	ef e6       	ldi	r30, 0x6F	; 111
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	82 60       	ori	r24, 0x02	; 2
     c88:	80 83       	st	Z, r24
     c8a:	08 95       	ret

00000c8c <pxPortInitialiseStack>:
     c8c:	31 e1       	ldi	r19, 0x11	; 17
     c8e:	fc 01       	movw	r30, r24
     c90:	30 83       	st	Z, r19
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	22 e2       	ldi	r18, 0x22	; 34
     c96:	20 83       	st	Z, r18
     c98:	31 97       	sbiw	r30, 0x01	; 1
     c9a:	a3 e3       	ldi	r26, 0x33	; 51
     c9c:	a0 83       	st	Z, r26
     c9e:	31 97       	sbiw	r30, 0x01	; 1
     ca0:	60 83       	st	Z, r22
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	70 83       	st	Z, r23
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	10 82       	st	Z, r1
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	60 e8       	ldi	r22, 0x80	; 128
     cae:	60 83       	st	Z, r22
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	10 82       	st	Z, r1
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	60 83       	st	Z, r22
     cba:	31 97       	sbiw	r30, 0x01	; 1
     cbc:	63 e0       	ldi	r22, 0x03	; 3
     cbe:	60 83       	st	Z, r22
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	64 e0       	ldi	r22, 0x04	; 4
     cc4:	60 83       	st	Z, r22
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	65 e0       	ldi	r22, 0x05	; 5
     cca:	60 83       	st	Z, r22
     ccc:	31 97       	sbiw	r30, 0x01	; 1
     cce:	66 e0       	ldi	r22, 0x06	; 6
     cd0:	60 83       	st	Z, r22
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	67 e0       	ldi	r22, 0x07	; 7
     cd6:	60 83       	st	Z, r22
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	68 e0       	ldi	r22, 0x08	; 8
     cdc:	60 83       	st	Z, r22
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	69 e0       	ldi	r22, 0x09	; 9
     ce2:	60 83       	st	Z, r22
     ce4:	31 97       	sbiw	r30, 0x01	; 1
     ce6:	60 e1       	ldi	r22, 0x10	; 16
     ce8:	60 83       	st	Z, r22
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	30 83       	st	Z, r19
     cee:	31 97       	sbiw	r30, 0x01	; 1
     cf0:	32 e1       	ldi	r19, 0x12	; 18
     cf2:	30 83       	st	Z, r19
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	33 e1       	ldi	r19, 0x13	; 19
     cf8:	30 83       	st	Z, r19
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	34 e1       	ldi	r19, 0x14	; 20
     cfe:	30 83       	st	Z, r19
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	35 e1       	ldi	r19, 0x15	; 21
     d04:	30 83       	st	Z, r19
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	36 e1       	ldi	r19, 0x16	; 22
     d0a:	30 83       	st	Z, r19
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	37 e1       	ldi	r19, 0x17	; 23
     d10:	30 83       	st	Z, r19
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	38 e1       	ldi	r19, 0x18	; 24
     d16:	30 83       	st	Z, r19
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	39 e1       	ldi	r19, 0x19	; 25
     d1c:	30 83       	st	Z, r19
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	30 e2       	ldi	r19, 0x20	; 32
     d22:	30 83       	st	Z, r19
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	31 e2       	ldi	r19, 0x21	; 33
     d28:	30 83       	st	Z, r19
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	20 83       	st	Z, r18
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	23 e2       	ldi	r18, 0x23	; 35
     d32:	20 83       	st	Z, r18
     d34:	31 97       	sbiw	r30, 0x01	; 1
     d36:	40 83       	st	Z, r20
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	50 83       	st	Z, r21
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	26 e2       	ldi	r18, 0x26	; 38
     d40:	20 83       	st	Z, r18
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	27 e2       	ldi	r18, 0x27	; 39
     d46:	20 83       	st	Z, r18
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	28 e2       	ldi	r18, 0x28	; 40
     d4c:	20 83       	st	Z, r18
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	29 e2       	ldi	r18, 0x29	; 41
     d52:	20 83       	st	Z, r18
     d54:	31 97       	sbiw	r30, 0x01	; 1
     d56:	20 e3       	ldi	r18, 0x30	; 48
     d58:	20 83       	st	Z, r18
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	21 e3       	ldi	r18, 0x31	; 49
     d5e:	20 83       	st	Z, r18
     d60:	86 97       	sbiw	r24, 0x26	; 38
     d62:	08 95       	ret

00000d64 <xPortStartScheduler>:
     d64:	0e 94 37 06 	call	0xc6e	; 0xc6e <prvSetupTimerInterrupt>
     d68:	a0 91 df 05 	lds	r26, 0x05DF	; 0x8005df <pxCurrentTCB>
     d6c:	b0 91 e0 05 	lds	r27, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
     d70:	cd 91       	ld	r28, X+
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	dd 91       	ld	r29, X+
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	9f 90       	pop	r9
     da6:	8f 90       	pop	r8
     da8:	7f 90       	pop	r7
     daa:	6f 90       	pop	r6
     dac:	5f 90       	pop	r5
     dae:	4f 90       	pop	r4
     db0:	3f 90       	pop	r3
     db2:	2f 90       	pop	r2
     db4:	1f 90       	pop	r1
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	08 95       	ret
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	08 95       	ret

00000dc2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	0f 92       	push	r0
     dca:	1f 92       	push	r1
     dcc:	11 24       	eor	r1, r1
     dce:	2f 92       	push	r2
     dd0:	3f 92       	push	r3
     dd2:	4f 92       	push	r4
     dd4:	5f 92       	push	r5
     dd6:	6f 92       	push	r6
     dd8:	7f 92       	push	r7
     dda:	8f 92       	push	r8
     ddc:	9f 92       	push	r9
     dde:	af 92       	push	r10
     de0:	bf 92       	push	r11
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
     e0a:	a0 91 df 05 	lds	r26, 0x05DF	; 0x8005df <pxCurrentTCB>
     e0e:	b0 91 e0 05 	lds	r27, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
     e12:	0d b6       	in	r0, 0x3d	; 61
     e14:	0d 92       	st	X+, r0
     e16:	0e b6       	in	r0, 0x3e	; 62
     e18:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e1a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e1e:	a0 91 df 05 	lds	r26, 0x05DF	; 0x8005df <pxCurrentTCB>
     e22:	b0 91 e0 05 	lds	r27, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
     e26:	cd 91       	ld	r28, X+
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	dd 91       	ld	r29, X+
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	bf 90       	pop	r11
     e58:	af 90       	pop	r10
     e5a:	9f 90       	pop	r9
     e5c:	8f 90       	pop	r8
     e5e:	7f 90       	pop	r7
     e60:	6f 90       	pop	r6
     e62:	5f 90       	pop	r5
     e64:	4f 90       	pop	r4
     e66:	3f 90       	pop	r3
     e68:	2f 90       	pop	r2
     e6a:	1f 90       	pop	r1
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e72:	08 95       	ret

00000e74 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	0f 92       	push	r0
     e7c:	1f 92       	push	r1
     e7e:	11 24       	eor	r1, r1
     e80:	2f 92       	push	r2
     e82:	3f 92       	push	r3
     e84:	4f 92       	push	r4
     e86:	5f 92       	push	r5
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
     ebc:	a0 91 df 05 	lds	r26, 0x05DF	; 0x8005df <pxCurrentTCB>
     ec0:	b0 91 e0 05 	lds	r27, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
     ec4:	0d b6       	in	r0, 0x3d	; 61
     ec6:	0d 92       	st	X+, r0
     ec8:	0e b6       	in	r0, 0x3e	; 62
     eca:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     ecc:	0e 94 4f 0b 	call	0x169e	; 0x169e <xTaskIncrementTick>
     ed0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     ed2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     ed6:	a0 91 df 05 	lds	r26, 0x05DF	; 0x8005df <pxCurrentTCB>
     eda:	b0 91 e0 05 	lds	r27, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
     ede:	cd 91       	ld	r28, X+
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	dd 91       	ld	r29, X+
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	8f 90       	pop	r8
     f16:	7f 90       	pop	r7
     f18:	6f 90       	pop	r6
     f1a:	5f 90       	pop	r5
     f1c:	4f 90       	pop	r4
     f1e:	3f 90       	pop	r3
     f20:	2f 90       	pop	r2
     f22:	1f 90       	pop	r1
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f2a:	08 95       	ret

00000f2c <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     f2c:	0e 94 3a 07 	call	0xe74	; 0xe74 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f30:	18 95       	reti

00000f32 <spiSetSlave>:
#include "SPI_Slave.h"

void spiSetSlave(uint8_t mode)
{
    DDRB = (1<<PB4);
     f32:	90 e1       	ldi	r25, 0x10	; 16
     f34:	94 b9       	out	0x04, r25	; 4
    SPCR = (1 << SPE);
     f36:	90 e4       	ldi	r25, 0x40	; 64
     f38:	9c bd       	out	0x2c, r25	; 44
    if (mode == 0)
     f3a:	81 11       	cpse	r24, r1
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <spiSetSlave+0x10>
        SPCR |= 0x00;
     f3e:	9c b5       	in	r25, 0x2c	; 44
     f40:	9c bd       	out	0x2c, r25	; 44
    if (mode == 1)
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	21 f4       	brne	.+8      	; 0xf4e <spiSetSlave+0x1c>
        SPCR |= 0x08;
     f46:	8c b5       	in	r24, 0x2c	; 44
     f48:	88 60       	ori	r24, 0x08	; 8
     f4a:	8c bd       	out	0x2c, r24	; 44
     f4c:	08 95       	ret
    else if (mode == 2)
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	21 f4       	brne	.+8      	; 0xf5a <spiSetSlave+0x28>
        SPCR |= 0x04;
     f52:	8c b5       	in	r24, 0x2c	; 44
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	8c bd       	out	0x2c, r24	; 44
     f58:	08 95       	ret
    else if (mode == 3)
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	19 f4       	brne	.+6      	; 0xf64 <spiSetSlave+0x32>
        SPCR |= 0x0C;
     f5e:	8c b5       	in	r24, 0x2c	; 44
     f60:	8c 60       	ori	r24, 0x0C	; 12
     f62:	8c bd       	out	0x2c, r24	; 44
     f64:	08 95       	ret

00000f66 <spiSendSlave>:
}

void spiSendSlave(uint8_t sdata)
{
    // send data to data register
    SPDR = sdata;
     f66:	8e bd       	out	0x2e, r24	; 46
    // wait for data to transfer
    while (!(SPSR & (1<<SPIF)));
     f68:	0d b4       	in	r0, 0x2d	; 45
     f6a:	07 fe       	sbrs	r0, 7
     f6c:	fd cf       	rjmp	.-6      	; 0xf68 <spiSendSlave+0x2>
}
     f6e:	08 95       	ret

00000f70 <spiReceiveSlave>:

uint8_t spiReceiveSlave()
{
    // check if flag spif is set as an indication that the data is received
    while (!(SPSR & (1<<SPIF)));
     f70:	0d b4       	in	r0, 0x2d	; 45
     f72:	07 fe       	sbrs	r0, 7
     f74:	fd cf       	rjmp	.-6      	; 0xf70 <spiReceiveSlave>
    return ((uint8_t) SPDR);
     f76:	8e b5       	in	r24, 0x2e	; 46
     f78:	08 95       	ret

00000f7a <setReferenceAngles>:
    }
    for(uint16_t i = 0; i < row_a * column_a; i++)
    {
        C[i] = A[i] + B[i];
    }
}
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	48 81       	ld	r20, Y
     f82:	59 81       	ldd	r21, Y+1	; 0x01
     f84:	6a 81       	ldd	r22, Y+2	; 0x02
     f86:	7b 81       	ldd	r23, Y+3	; 0x03
     f88:	e5 e8       	ldi	r30, 0x85	; 133
     f8a:	f5 e0       	ldi	r31, 0x05	; 5
     f8c:	40 83       	st	Z, r20
     f8e:	51 83       	std	Z+1, r21	; 0x01
     f90:	62 83       	std	Z+2, r22	; 0x02
     f92:	73 83       	std	Z+3, r23	; 0x03
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	ae 81       	ldd	r26, Y+6	; 0x06
     f9a:	bf 81       	ldd	r27, Y+7	; 0x07
     f9c:	84 83       	std	Z+4, r24	; 0x04
     f9e:	95 83       	std	Z+5, r25	; 0x05
     fa0:	a6 83       	std	Z+6, r26	; 0x06
     fa2:	b7 83       	std	Z+7, r27	; 0x07
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <sub>:

void sub(float *A, float *B, float *C, uint16_t row_a, uint16_t column_a, uint16_t row_b, uint16_t column_b)
{
     faa:	6f 92       	push	r6
     fac:	7f 92       	push	r7
     fae:	8f 92       	push	r8
     fb0:	9f 92       	push	r9
     fb2:	af 92       	push	r10
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
    if ((row_a != row_b) || (column_a != column_b))
     fc6:	2e 15       	cp	r18, r14
     fc8:	3f 05       	cpc	r19, r15
     fca:	91 f5       	brne	.+100    	; 0x1030 <sub+0x86>
     fcc:	0c 15       	cp	r16, r12
     fce:	1d 05       	cpc	r17, r13
     fd0:	79 f5       	brne	.+94     	; 0x1030 <sub+0x86>
     fd2:	79 01       	movw	r14, r18
     fd4:	4a 01       	movw	r8, r20
     fd6:	5b 01       	movw	r10, r22
     fd8:	3c 01       	movw	r6, r24
     fda:	c0 e0       	ldi	r28, 0x00	; 0
     fdc:	d0 e0       	ldi	r29, 0x00	; 0
     fde:	1e c0       	rjmp	.+60     	; 0x101c <sub+0x72>
    {
        return;
    }
    for(uint16_t i = 0; i < row_a * column_a; i++)
    {
        C[i] = A[i] - B[i];
     fe0:	9e 01       	movw	r18, r28
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	22 0f       	add	r18, r18
     fe8:	33 1f       	adc	r19, r19
     fea:	64 01       	movw	r12, r8
     fec:	c2 0e       	add	r12, r18
     fee:	d3 1e       	adc	r13, r19
     ff0:	f3 01       	movw	r30, r6
     ff2:	e2 0f       	add	r30, r18
     ff4:	f3 1f       	adc	r31, r19
     ff6:	60 81       	ld	r22, Z
     ff8:	71 81       	ldd	r23, Z+1	; 0x01
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
     ffc:	93 81       	ldd	r25, Z+3	; 0x03
     ffe:	f5 01       	movw	r30, r10
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	20 81       	ld	r18, Z
    1006:	31 81       	ldd	r19, Z+1	; 0x01
    1008:	42 81       	ldd	r20, Z+2	; 0x02
    100a:	53 81       	ldd	r21, Z+3	; 0x03
    100c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__subsf3>
    1010:	f6 01       	movw	r30, r12
    1012:	60 83       	st	Z, r22
    1014:	71 83       	std	Z+1, r23	; 0x01
    1016:	82 83       	std	Z+2, r24	; 0x02
    1018:	93 83       	std	Z+3, r25	; 0x03
{
    if ((row_a != row_b) || (column_a != column_b))
    {
        return;
    }
    for(uint16_t i = 0; i < row_a * column_a; i++)
    101a:	21 96       	adiw	r28, 0x01	; 1
    101c:	e0 9e       	mul	r14, r16
    101e:	c0 01       	movw	r24, r0
    1020:	e1 9e       	mul	r14, r17
    1022:	90 0d       	add	r25, r0
    1024:	f0 9e       	mul	r15, r16
    1026:	90 0d       	add	r25, r0
    1028:	11 24       	eor	r1, r1
    102a:	c8 17       	cp	r28, r24
    102c:	d9 07       	cpc	r29, r25
    102e:	c0 f2       	brcs	.-80     	; 0xfe0 <sub+0x36>
    {
        C[i] = A[i] - B[i];
    }
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	9f 90       	pop	r9
    1046:	8f 90       	pop	r8
    1048:	7f 90       	pop	r7
    104a:	6f 90       	pop	r6
    104c:	08 95       	ret

0000104e <mul>:

void mul(float A[], float B[], float C[], uint16_t row_a, uint16_t column_a, uint16_t column_b) {
    104e:	2f 92       	push	r2
    1050:	3f 92       	push	r3
    1052:	4f 92       	push	r4
    1054:	5f 92       	push	r5
    1056:	6f 92       	push	r6
    1058:	7f 92       	push	r7
    105a:	8f 92       	push	r8
    105c:	9f 92       	push	r9
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	00 d0       	rcall	.+0      	; 0x1074 <mul+0x26>
    1074:	00 d0       	rcall	.+0      	; 0x1076 <mul+0x28>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <mul+0x2a>
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	2c 01       	movw	r4, r24
    107e:	1b 01       	movw	r2, r22
    1080:	4a 01       	movw	r8, r20
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	2b 83       	std	Y+3, r18	; 0x03

  // Data matrix
  float* data_a;
  float* data_b;

  for (uint16_t i = 0; i < row_a; i++) {
    1086:	1a 82       	std	Y+2, r1	; 0x02
    1088:	19 82       	std	Y+1, r1	; 0x01
    108a:	5f c0       	rjmp	.+190    	; 0x114a <mul+0xfc>
    // Then we go through every column of b
    for (uint16_t j = 0; j < column_b; j++) {
      data_a = &A[i * column_a];
    108c:	29 81       	ldd	r18, Y+1	; 0x01
    108e:	3a 81       	ldd	r19, Y+2	; 0x02
    1090:	20 9f       	mul	r18, r16
    1092:	50 01       	movw	r10, r0
    1094:	21 9f       	mul	r18, r17
    1096:	b0 0c       	add	r11, r0
    1098:	30 9f       	mul	r19, r16
    109a:	b0 0c       	add	r11, r0
    109c:	11 24       	eor	r1, r1
    109e:	aa 0c       	add	r10, r10
    10a0:	bb 1c       	adc	r11, r11
    10a2:	aa 0c       	add	r10, r10
    10a4:	bb 1c       	adc	r11, r11
    10a6:	a4 0c       	add	r10, r4
    10a8:	b5 1c       	adc	r11, r5
      data_b = &B[j];
    10aa:	c3 01       	movw	r24, r6
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	82 0d       	add	r24, r2
    10b6:	93 1d       	adc	r25, r3
    10b8:	9e 83       	std	Y+6, r25	; 0x06
    10ba:	8d 83       	std	Y+5, r24	; 0x05

      *C = 0; // Reset
    10bc:	f4 01       	movw	r30, r8
    10be:	10 82       	st	Z, r1
    10c0:	11 82       	std	Z+1, r1	; 0x01
    10c2:	12 82       	std	Z+2, r1	; 0x02
    10c4:	13 82       	std	Z+3, r1	; 0x03
      // And we multiply rows from a with columns of b
      for (uint16_t k = 0; k < column_a; k++) {
    10c6:	c1 2c       	mov	r12, r1
    10c8:	d1 2c       	mov	r13, r1
    10ca:	2a c0       	rjmp	.+84     	; 0x1120 <mul+0xd2>
        *C += *data_a * *data_b;
    10cc:	f5 01       	movw	r30, r10
    10ce:	61 91       	ld	r22, Z+
    10d0:	71 91       	ld	r23, Z+
    10d2:	81 91       	ld	r24, Z+
    10d4:	91 91       	ld	r25, Z+
    10d6:	5f 01       	movw	r10, r30
    10d8:	ed 81       	ldd	r30, Y+5	; 0x05
    10da:	fe 81       	ldd	r31, Y+6	; 0x06
    10dc:	20 81       	ld	r18, Z
    10de:	31 81       	ldd	r19, Z+1	; 0x01
    10e0:	42 81       	ldd	r20, Z+2	; 0x02
    10e2:	53 81       	ldd	r21, Z+3	; 0x03
    10e4:	0e 94 25 10 	call	0x204a	; 0x204a <__mulsf3>
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	f4 01       	movw	r30, r8
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__addsf3>
    10fa:	f4 01       	movw	r30, r8
    10fc:	60 83       	st	Z, r22
    10fe:	71 83       	std	Z+1, r23	; 0x01
    1100:	82 83       	std	Z+2, r24	; 0x02
    1102:	93 83       	std	Z+3, r25	; 0x03
        data_a++;
        data_b += column_b;
    1104:	c7 01       	movw	r24, r14
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	2d 81       	ldd	r18, Y+5	; 0x05
    1110:	3e 81       	ldd	r19, Y+6	; 0x06
    1112:	28 0f       	add	r18, r24
    1114:	39 1f       	adc	r19, r25
    1116:	3e 83       	std	Y+6, r19	; 0x06
    1118:	2d 83       	std	Y+5, r18	; 0x05
      data_a = &A[i * column_a];
      data_b = &B[j];

      *C = 0; // Reset
      // And we multiply rows from a with columns of b
      for (uint16_t k = 0; k < column_a; k++) {
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	c3 1a       	sub	r12, r19
    111e:	d3 0a       	sbc	r13, r19
    1120:	c0 16       	cp	r12, r16
    1122:	d1 06       	cpc	r13, r17
    1124:	98 f2       	brcs	.-90     	; 0x10cc <mul+0x7e>
        *C += *data_a * *data_b;
        data_a++;
        data_b += column_b;
      }
      C++; // ;)
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	88 0e       	add	r8, r24
    112a:	91 1c       	adc	r9, r1
  float* data_a;
  float* data_b;

  for (uint16_t i = 0; i < row_a; i++) {
    // Then we go through every column of b
    for (uint16_t j = 0; j < column_b; j++) {
    112c:	9f ef       	ldi	r25, 0xFF	; 255
    112e:	69 1a       	sub	r6, r25
    1130:	79 0a       	sbc	r7, r25
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <mul+0xea>
    1134:	61 2c       	mov	r6, r1
    1136:	71 2c       	mov	r7, r1
    1138:	6e 14       	cp	r6, r14
    113a:	7f 04       	cpc	r7, r15
    113c:	08 f4       	brcc	.+2      	; 0x1140 <mul+0xf2>
    113e:	a6 cf       	rjmp	.-180    	; 0x108c <mul+0x3e>

  // Data matrix
  float* data_a;
  float* data_b;

  for (uint16_t i = 0; i < row_a; i++) {
    1140:	e9 81       	ldd	r30, Y+1	; 0x01
    1142:	fa 81       	ldd	r31, Y+2	; 0x02
    1144:	31 96       	adiw	r30, 0x01	; 1
    1146:	fa 83       	std	Y+2, r31	; 0x02
    1148:	e9 83       	std	Y+1, r30	; 0x01
    114a:	29 81       	ldd	r18, Y+1	; 0x01
    114c:	3a 81       	ldd	r19, Y+2	; 0x02
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	28 17       	cp	r18, r24
    1154:	39 07       	cpc	r19, r25
    1156:	70 f3       	brcs	.-36     	; 0x1134 <mul+0xe6>
        data_b += column_b;
      }
      C++; // ;)
    }
  }
}
    1158:	26 96       	adiw	r28, 0x06	; 6
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	9f 90       	pop	r9
    117a:	8f 90       	pop	r8
    117c:	7f 90       	pop	r7
    117e:	6f 90       	pop	r6
    1180:	5f 90       	pop	r5
    1182:	4f 90       	pop	r4
    1184:	3f 90       	pop	r3
    1186:	2f 90       	pop	r2
    1188:	08 95       	ret

0000118a <updateController>:
{
  r[0] = ref[0];
  r[1] = ref[1];
}

void updateController(float *observedStates, float *actValues){
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	68 97       	sbiw	r28, 0x18	; 24
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	fc 01       	movw	r30, r24
    11b0:	5b 01       	movw	r10, r22
    float tP[2] = {0,0};
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	1a 82       	std	Y+2, r1	; 0x02
    11b6:	1b 82       	std	Y+3, r1	; 0x03
    11b8:	1c 82       	std	Y+4, r1	; 0x04
    11ba:	1d 82       	std	Y+5, r1	; 0x05
    11bc:	1e 82       	std	Y+6, r1	; 0x06
    11be:	1f 82       	std	Y+7, r1	; 0x07
    11c0:	18 86       	std	Y+8, r1	; 0x08
    float x[4] = {observedStates[0],
    11c2:	80 81       	ld	r24, Z
    11c4:	91 81       	ldd	r25, Z+1	; 0x01
    11c6:	a2 81       	ldd	r26, Z+2	; 0x02
    11c8:	b3 81       	ldd	r27, Z+3	; 0x03
    11ca:	89 87       	std	Y+9, r24	; 0x09
    11cc:	9a 87       	std	Y+10, r25	; 0x0a
    11ce:	ab 87       	std	Y+11, r26	; 0x0b
    11d0:	bc 87       	std	Y+12, r27	; 0x0c
    11d2:	84 81       	ldd	r24, Z+4	; 0x04
    11d4:	95 81       	ldd	r25, Z+5	; 0x05
    11d6:	a6 81       	ldd	r26, Z+6	; 0x06
    11d8:	b7 81       	ldd	r27, Z+7	; 0x07
    11da:	8d 87       	std	Y+13, r24	; 0x0d
    11dc:	9e 87       	std	Y+14, r25	; 0x0e
    11de:	af 87       	std	Y+15, r26	; 0x0f
    11e0:	b8 8b       	std	Y+16, r27	; 0x10
    11e2:	80 85       	ldd	r24, Z+8	; 0x08
    11e4:	91 85       	ldd	r25, Z+9	; 0x09
    11e6:	a2 85       	ldd	r26, Z+10	; 0x0a
    11e8:	b3 85       	ldd	r27, Z+11	; 0x0b
    11ea:	89 8b       	std	Y+17, r24	; 0x11
    11ec:	9a 8b       	std	Y+18, r25	; 0x12
    11ee:	ab 8b       	std	Y+19, r26	; 0x13
    11f0:	bc 8b       	std	Y+20, r27	; 0x14
    11f2:	84 85       	ldd	r24, Z+12	; 0x0c
    11f4:	95 85       	ldd	r25, Z+13	; 0x0d
    11f6:	a6 85       	ldd	r26, Z+14	; 0x0e
    11f8:	b7 85       	ldd	r27, Z+15	; 0x0f
    11fa:	8d 8b       	std	Y+21, r24	; 0x15
    11fc:	9e 8b       	std	Y+22, r25	; 0x16
    11fe:	af 8b       	std	Y+23, r26	; 0x17
    1200:	b8 8f       	std	Y+24, r27	; 0x18
                  observedStates[1],
                  observedStates[2],
                  observedStates[3]};

    mul(K, x, tP, row_k, col_k, col_x);
    1202:	ee 24       	eor	r14, r14
    1204:	e3 94       	inc	r14
    1206:	f1 2c       	mov	r15, r1
    1208:	04 e0       	ldi	r16, 0x04	; 4
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	22 e0       	ldi	r18, 0x02	; 2
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	ae 01       	movw	r20, r28
    1212:	4f 5f       	subi	r20, 0xFF	; 255
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	be 01       	movw	r22, r28
    1218:	67 5f       	subi	r22, 0xF7	; 247
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 27 08 	call	0x104e	; 0x104e <mul>
    sub(r, tP, u, row_r, col_r, row_u, col_u);
    1224:	cc 24       	eor	r12, r12
    1226:	c3 94       	inc	r12
    1228:	d1 2c       	mov	r13, r1
    122a:	68 94       	set
    122c:	ee 24       	eor	r14, r14
    122e:	e1 f8       	bld	r14, 1
    1230:	f1 2c       	mov	r15, r1
    1232:	01 e0       	ldi	r16, 0x01	; 1
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	22 e0       	ldi	r18, 0x02	; 2
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	43 e1       	ldi	r20, 0x13	; 19
    123c:	56 e0       	ldi	r21, 0x06	; 6
    123e:	be 01       	movw	r22, r28
    1240:	6f 5f       	subi	r22, 0xFF	; 255
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	85 e8       	ldi	r24, 0x85	; 133
    1246:	95 e0       	ldi	r25, 0x05	; 5
    1248:	0e 94 d5 07 	call	0xfaa	; 0xfaa <sub>

    actValues[0] = u[0];
    124c:	23 e1       	ldi	r18, 0x13	; 19
    124e:	36 e0       	ldi	r19, 0x06	; 6
    1250:	f9 01       	movw	r30, r18
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	a2 81       	ldd	r26, Z+2	; 0x02
    1258:	b3 81       	ldd	r27, Z+3	; 0x03
    125a:	f5 01       	movw	r30, r10
    125c:	80 83       	st	Z, r24
    125e:	91 83       	std	Z+1, r25	; 0x01
    1260:	a2 83       	std	Z+2, r26	; 0x02
    1262:	b3 83       	std	Z+3, r27	; 0x03
    actValues[1] = u[1];
    1264:	f9 01       	movw	r30, r18
    1266:	84 81       	ldd	r24, Z+4	; 0x04
    1268:	95 81       	ldd	r25, Z+5	; 0x05
    126a:	a6 81       	ldd	r26, Z+6	; 0x06
    126c:	b7 81       	ldd	r27, Z+7	; 0x07
    126e:	f5 01       	movw	r30, r10
    1270:	84 83       	std	Z+4, r24	; 0x04
    1272:	95 83       	std	Z+5, r25	; 0x05
    1274:	a6 83       	std	Z+6, r26	; 0x06
    1276:	b7 83       	std	Z+7, r27	; 0x07
}
    1278:	68 96       	adiw	r28, 0x18	; 24
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	08 95       	ret

0000129a <prvResetNextTaskUnblockTime>:
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
    129a:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <pxDelayedTaskList>
    129e:	f0 91 a8 05 	lds	r31, 0x05A8	; 0x8005a8 <pxDelayedTaskList+0x1>
    12a2:	80 81       	ld	r24, Z
    12a4:	81 11       	cpse	r24, r1
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <prvResetNextTaskUnblockTime+0x1c>
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	9f ef       	ldi	r25, 0xFF	; 255
    12ac:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    12b0:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    12b4:	08 95       	ret
    12b6:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <pxDelayedTaskList>
    12ba:	f0 91 a8 05 	lds	r31, 0x05A8	; 0x8005a8 <pxDelayedTaskList+0x1>
    12be:	05 80       	ldd	r0, Z+5	; 0x05
    12c0:	f6 81       	ldd	r31, Z+6	; 0x06
    12c2:	e0 2d       	mov	r30, r0
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    12cc:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    12d0:	08 95       	ret

000012d2 <prvInitialiseNewTask>:
    12d2:	6f 92       	push	r6
    12d4:	7f 92       	push	r7
    12d6:	8f 92       	push	r8
    12d8:	9f 92       	push	r9
    12da:	af 92       	push	r10
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	4c 01       	movw	r8, r24
    12f2:	d5 01       	movw	r26, r10
    12f4:	57 96       	adiw	r26, 0x17	; 23
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	58 97       	sbiw	r26, 0x18	; 24
    12fc:	21 50       	subi	r18, 0x01	; 1
    12fe:	31 09       	sbc	r19, r1
    1300:	3c 01       	movw	r6, r24
    1302:	62 0e       	add	r6, r18
    1304:	73 1e       	adc	r7, r19
    1306:	61 15       	cp	r22, r1
    1308:	71 05       	cpc	r23, r1
    130a:	89 f4       	brne	.+34     	; 0x132e <prvInitialiseNewTask+0x5c>
    130c:	16 c0       	rjmp	.+44     	; 0x133a <prvInitialiseNewTask+0x68>
    130e:	82 2f       	mov	r24, r18
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	fb 01       	movw	r30, r22
    1314:	e8 0f       	add	r30, r24
    1316:	f9 1f       	adc	r31, r25
    1318:	30 81       	ld	r19, Z
    131a:	d5 01       	movw	r26, r10
    131c:	a8 0f       	add	r26, r24
    131e:	b9 1f       	adc	r27, r25
    1320:	59 96       	adiw	r26, 0x19	; 25
    1322:	3c 93       	st	X, r19
    1324:	80 81       	ld	r24, Z
    1326:	88 23       	and	r24, r24
    1328:	29 f0       	breq	.+10     	; 0x1334 <prvInitialiseNewTask+0x62>
    132a:	2f 5f       	subi	r18, 0xFF	; 255
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <prvInitialiseNewTask+0x5e>
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	28 30       	cpi	r18, 0x08	; 8
    1332:	68 f3       	brcs	.-38     	; 0x130e <prvInitialiseNewTask+0x3c>
    1334:	f5 01       	movw	r30, r10
    1336:	10 a2       	std	Z+32, r1	; 0x20
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <prvInitialiseNewTask+0x6e>
    133a:	d5 01       	movw	r26, r10
    133c:	59 96       	adiw	r26, 0x19	; 25
    133e:	1c 92       	st	X, r1
    1340:	b3 e0       	ldi	r27, 0x03	; 3
    1342:	be 15       	cp	r27, r14
    1344:	20 f4       	brcc	.+8      	; 0x134e <prvInitialiseNewTask+0x7c>
    1346:	0f 2e       	mov	r0, r31
    1348:	f3 e0       	ldi	r31, 0x03	; 3
    134a:	ef 2e       	mov	r14, r31
    134c:	f0 2d       	mov	r31, r0
    134e:	f5 01       	movw	r30, r10
    1350:	e6 8a       	std	Z+22, r14	; 0x16
    1352:	e1 a2       	std	Z+33, r14	; 0x21
    1354:	12 a2       	std	Z+34, r1	; 0x22
    1356:	c5 01       	movw	r24, r10
    1358:	02 96       	adiw	r24, 0x02	; 2
    135a:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialiseItem>
    135e:	c5 01       	movw	r24, r10
    1360:	0c 96       	adiw	r24, 0x0c	; 12
    1362:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialiseItem>
    1366:	d5 01       	movw	r26, r10
    1368:	19 96       	adiw	r26, 0x09	; 9
    136a:	bc 92       	st	X, r11
    136c:	ae 92       	st	-X, r10
    136e:	18 97       	sbiw	r26, 0x08	; 8
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	8e 19       	sub	r24, r14
    1376:	91 09       	sbc	r25, r1
    1378:	1d 96       	adiw	r26, 0x0d	; 13
    137a:	9c 93       	st	X, r25
    137c:	8e 93       	st	-X, r24
    137e:	1c 97       	sbiw	r26, 0x0c	; 12
    1380:	53 96       	adiw	r26, 0x13	; 19
    1382:	bc 92       	st	X, r11
    1384:	ae 92       	st	-X, r10
    1386:	52 97       	sbiw	r26, 0x12	; 18
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	f5 01       	movw	r30, r10
    138c:	b3 96       	adiw	r30, 0x23	; 35
    138e:	df 01       	movw	r26, r30
    1390:	1d 92       	st	X+, r1
    1392:	8a 95       	dec	r24
    1394:	e9 f7       	brne	.-6      	; 0x1390 <prvInitialiseNewTask+0xbe>
    1396:	f5 01       	movw	r30, r10
    1398:	17 a2       	std	Z+39, r1	; 0x27
    139a:	a8 01       	movw	r20, r16
    139c:	b4 01       	movw	r22, r8
    139e:	c3 01       	movw	r24, r6
    13a0:	0e 94 46 06 	call	0xc8c	; 0xc8c <pxPortInitialiseStack>
    13a4:	d5 01       	movw	r26, r10
    13a6:	8d 93       	st	X+, r24
    13a8:	9c 93       	st	X, r25
    13aa:	c1 14       	cp	r12, r1
    13ac:	d1 04       	cpc	r13, r1
    13ae:	19 f0       	breq	.+6      	; 0x13b6 <prvInitialiseNewTask+0xe4>
    13b0:	f6 01       	movw	r30, r12
    13b2:	b1 82       	std	Z+1, r11	; 0x01
    13b4:	a0 82       	st	Z, r10
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	bf 90       	pop	r11
    13c6:	af 90       	pop	r10
    13c8:	9f 90       	pop	r9
    13ca:	8f 90       	pop	r8
    13cc:	7f 90       	pop	r7
    13ce:	6f 90       	pop	r6
    13d0:	08 95       	ret

000013d2 <prvIdleTask>:
    13d2:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <pxReadyTasksLists>
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	e0 f3       	brcs	.-8      	; 0x13d2 <prvIdleTask>
    13da:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortYield>
    13de:	f9 cf       	rjmp	.-14     	; 0x13d2 <prvIdleTask>

000013e0 <prvInitialiseTaskLists>:
    13e0:	cf 93       	push	r28
    13e2:	c0 e0       	ldi	r28, 0x00	; 0
    13e4:	10 c0       	rjmp	.+32     	; 0x1406 <prvInitialiseTaskLists+0x26>
    13e6:	8c 2f       	mov	r24, r28
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9c 01       	movw	r18, r24
    13ec:	22 0f       	add	r18, r18
    13ee:	33 1f       	adc	r19, r19
    13f0:	22 0f       	add	r18, r18
    13f2:	33 1f       	adc	r19, r19
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	85 54       	subi	r24, 0x45	; 69
    13fe:	9a 4f       	sbci	r25, 0xFA	; 250
    1400:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    1404:	cf 5f       	subi	r28, 0xFF	; 255
    1406:	c4 30       	cpi	r28, 0x04	; 4
    1408:	70 f3       	brcs	.-36     	; 0x13e6 <prvInitialiseTaskLists+0x6>
    140a:	82 eb       	ldi	r24, 0xB2	; 178
    140c:	95 e0       	ldi	r25, 0x05	; 5
    140e:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    1412:	89 ea       	ldi	r24, 0xA9	; 169
    1414:	95 e0       	ldi	r25, 0x05	; 5
    1416:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    141a:	8c e9       	ldi	r24, 0x9C	; 156
    141c:	95 e0       	ldi	r25, 0x05	; 5
    141e:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    1422:	82 eb       	ldi	r24, 0xB2	; 178
    1424:	95 e0       	ldi	r25, 0x05	; 5
    1426:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <pxDelayedTaskList+0x1>
    142a:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <pxDelayedTaskList>
    142e:	89 ea       	ldi	r24, 0xA9	; 169
    1430:	95 e0       	ldi	r25, 0x05	; 5
    1432:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <pxOverflowDelayedTaskList+0x1>
    1436:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <pxOverflowDelayedTaskList>
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <prvAddNewTaskToReadyList>:
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	ec 01       	movw	r28, r24
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	0f 92       	push	r0
    144a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <uxCurrentNumberOfTasks>
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <uxCurrentNumberOfTasks>
    1454:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <pxCurrentTCB>
    1458:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    145c:	89 2b       	or	r24, r25
    145e:	59 f4       	brne	.+22     	; 0x1476 <prvAddNewTaskToReadyList+0x38>
    1460:	d0 93 e0 05 	sts	0x05E0, r29	; 0x8005e0 <pxCurrentTCB+0x1>
    1464:	c0 93 df 05 	sts	0x05DF, r28	; 0x8005df <pxCurrentTCB>
    1468:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <uxCurrentNumberOfTasks>
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	99 f4       	brne	.+38     	; 0x1496 <prvAddNewTaskToReadyList+0x58>
    1470:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <prvInitialiseTaskLists>
    1474:	10 c0       	rjmp	.+32     	; 0x1496 <prvAddNewTaskToReadyList+0x58>
    1476:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <xSchedulerRunning>
    147a:	81 11       	cpse	r24, r1
    147c:	0c c0       	rjmp	.+24     	; 0x1496 <prvAddNewTaskToReadyList+0x58>
    147e:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1482:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1486:	96 89       	ldd	r25, Z+22	; 0x16
    1488:	8e 89       	ldd	r24, Y+22	; 0x16
    148a:	89 17       	cp	r24, r25
    148c:	20 f0       	brcs	.+8      	; 0x1496 <prvAddNewTaskToReadyList+0x58>
    148e:	d0 93 e0 05 	sts	0x05E0, r29	; 0x8005e0 <pxCurrentTCB+0x1>
    1492:	c0 93 df 05 	sts	0x05DF, r28	; 0x8005df <pxCurrentTCB>
    1496:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <uxTaskNumber>
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <uxTaskNumber>
    14a0:	8e 89       	ldd	r24, Y+22	; 0x16
    14a2:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <uxTopReadyPriority>
    14a6:	98 17       	cp	r25, r24
    14a8:	10 f4       	brcc	.+4      	; 0x14ae <prvAddNewTaskToReadyList+0x70>
    14aa:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <uxTopReadyPriority>
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 01       	movw	r18, r24
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	22 0f       	add	r18, r18
    14bc:	33 1f       	adc	r19, r19
    14be:	82 0f       	add	r24, r18
    14c0:	93 1f       	adc	r25, r19
    14c2:	be 01       	movw	r22, r28
    14c4:	6e 5f       	subi	r22, 0xFE	; 254
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	85 54       	subi	r24, 0x45	; 69
    14ca:	9a 4f       	sbci	r25, 0xFA	; 250
    14cc:	0e 94 9b 01 	call	0x336	; 0x336 <vListInsertEnd>
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <xSchedulerRunning>
    14d8:	88 23       	and	r24, r24
    14da:	51 f0       	breq	.+20     	; 0x14f0 <prvAddNewTaskToReadyList+0xb2>
    14dc:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    14e0:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    14e4:	96 89       	ldd	r25, Z+22	; 0x16
    14e6:	8e 89       	ldd	r24, Y+22	; 0x16
    14e8:	98 17       	cp	r25, r24
    14ea:	10 f4       	brcc	.+4      	; 0x14f0 <prvAddNewTaskToReadyList+0xb2>
    14ec:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortYield>
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <prvAddCurrentTaskToDelayedList>:
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	00 91 99 05 	lds	r16, 0x0599	; 0x800599 <xTickCount>
    1504:	10 91 9a 05 	lds	r17, 0x059A	; 0x80059a <xTickCount+0x1>
    1508:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <pxCurrentTCB>
    150c:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1510:	02 96       	adiw	r24, 0x02	; 2
    1512:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
    1516:	c0 0f       	add	r28, r16
    1518:	d1 1f       	adc	r29, r17
    151a:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    151e:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1522:	d3 83       	std	Z+3, r29	; 0x03
    1524:	c2 83       	std	Z+2, r28	; 0x02
    1526:	c0 17       	cp	r28, r16
    1528:	d1 07       	cpc	r29, r17
    152a:	68 f4       	brcc	.+26     	; 0x1546 <prvAddCurrentTaskToDelayedList+0x50>
    152c:	60 91 df 05 	lds	r22, 0x05DF	; 0x8005df <pxCurrentTCB>
    1530:	70 91 e0 05 	lds	r23, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1534:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <pxOverflowDelayedTaskList>
    1538:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <pxOverflowDelayedTaskList+0x1>
    153c:	6e 5f       	subi	r22, 0xFE	; 254
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	0e 94 bc 01 	call	0x378	; 0x378 <vListInsert>
    1544:	17 c0       	rjmp	.+46     	; 0x1574 <prvAddCurrentTaskToDelayedList+0x7e>
    1546:	60 91 df 05 	lds	r22, 0x05DF	; 0x8005df <pxCurrentTCB>
    154a:	70 91 e0 05 	lds	r23, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    154e:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <pxDelayedTaskList>
    1552:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <pxDelayedTaskList+0x1>
    1556:	6e 5f       	subi	r22, 0xFE	; 254
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	0e 94 bc 01 	call	0x378	; 0x378 <vListInsert>
    155e:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <xNextTaskUnblockTime>
    1562:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <xNextTaskUnblockTime+0x1>
    1566:	c8 17       	cp	r28, r24
    1568:	d9 07       	cpc	r29, r25
    156a:	20 f4       	brcc	.+8      	; 0x1574 <prvAddCurrentTaskToDelayedList+0x7e>
    156c:	d0 93 91 05 	sts	0x0591, r29	; 0x800591 <xNextTaskUnblockTime+0x1>
    1570:	c0 93 90 05 	sts	0x0590, r28	; 0x800590 <xNextTaskUnblockTime>
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <xTaskCreate>:
    157e:	2f 92       	push	r2
    1580:	3f 92       	push	r3
    1582:	4f 92       	push	r4
    1584:	5f 92       	push	r5
    1586:	6f 92       	push	r6
    1588:	7f 92       	push	r7
    158a:	8f 92       	push	r8
    158c:	9f 92       	push	r9
    158e:	af 92       	push	r10
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	3c 01       	movw	r6, r24
    15a4:	1b 01       	movw	r2, r22
    15a6:	5a 01       	movw	r10, r20
    15a8:	29 01       	movw	r4, r18
    15aa:	ca 01       	movw	r24, r20
    15ac:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pvPortMalloc>
    15b0:	6c 01       	movw	r12, r24
    15b2:	89 2b       	or	r24, r25
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <xTaskCreate+0x54>
    15b6:	88 e2       	ldi	r24, 0x28	; 40
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pvPortMalloc>
    15be:	ec 01       	movw	r28, r24
    15c0:	89 2b       	or	r24, r25
    15c2:	19 f0       	breq	.+6      	; 0x15ca <xTaskCreate+0x4c>
    15c4:	d8 8e       	std	Y+24, r13	; 0x18
    15c6:	cf 8a       	std	Y+23, r12	; 0x17
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <xTaskCreate+0x58>
    15ca:	c6 01       	movw	r24, r12
    15cc:	0e 94 88 01 	call	0x310	; 0x310 <vPortFree>
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <xTaskCreate+0x58>
    15d2:	c0 e0       	ldi	r28, 0x00	; 0
    15d4:	d0 e0       	ldi	r29, 0x00	; 0
    15d6:	20 97       	sbiw	r28, 0x00	; 0
    15d8:	91 f0       	breq	.+36     	; 0x15fe <xTaskCreate+0x80>
    15da:	95 01       	movw	r18, r10
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	81 2c       	mov	r8, r1
    15e2:	91 2c       	mov	r9, r1
    15e4:	5e 01       	movw	r10, r28
    15e6:	67 01       	movw	r12, r14
    15e8:	e0 2e       	mov	r14, r16
    15ea:	82 01       	movw	r16, r4
    15ec:	b1 01       	movw	r22, r2
    15ee:	c3 01       	movw	r24, r6
    15f0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <prvInitialiseNewTask>
    15f4:	ce 01       	movw	r24, r28
    15f6:	0e 94 1f 0a 	call	0x143e	; 0x143e <prvAddNewTaskToReadyList>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <xTaskCreate+0x82>
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	bf 90       	pop	r11
    1612:	af 90       	pop	r10
    1614:	9f 90       	pop	r9
    1616:	8f 90       	pop	r8
    1618:	7f 90       	pop	r7
    161a:	6f 90       	pop	r6
    161c:	5f 90       	pop	r5
    161e:	4f 90       	pop	r4
    1620:	3f 90       	pop	r3
    1622:	2f 90       	pop	r2
    1624:	08 95       	ret

00001626 <vTaskStartScheduler>:
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	0f 2e       	mov	r0, r31
    162e:	fe e8       	ldi	r31, 0x8E	; 142
    1630:	ef 2e       	mov	r14, r31
    1632:	f5 e0       	ldi	r31, 0x05	; 5
    1634:	ff 2e       	mov	r15, r31
    1636:	f0 2d       	mov	r31, r0
    1638:	00 e0       	ldi	r16, 0x00	; 0
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	46 e4       	ldi	r20, 0x46	; 70
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	60 e4       	ldi	r22, 0x40	; 64
    1644:	72 e0       	ldi	r23, 0x02	; 2
    1646:	89 ee       	ldi	r24, 0xE9	; 233
    1648:	99 e0       	ldi	r25, 0x09	; 9
    164a:	0e 94 bf 0a 	call	0x157e	; 0x157e <xTaskCreate>
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	81 f4       	brne	.+32     	; 0x1672 <vTaskStartScheduler+0x4c>
    1652:	f8 94       	cli
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    165c:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <xSchedulerRunning>
    1666:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <xTickCount+0x1>
    166a:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <xTickCount>
    166e:	0e 94 b2 06 	call	0xd64	; 0xd64 <xPortStartScheduler>
    1672:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <uxTopUsedPriority>
    1676:	0f 91       	pop	r16
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	08 95       	ret

0000167e <vTaskSuspendAll>:
    167e:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    1682:	8f 5f       	subi	r24, 0xFF	; 255
    1684:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <uxSchedulerSuspended>
    1688:	08 95       	ret

0000168a <xTaskGetTickCount>:
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	0f 92       	push	r0
    1690:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <xTickCount>
    1694:	90 91 9a 05 	lds	r25, 0x059A	; 0x80059a <xTickCount+0x1>
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	08 95       	ret

0000169e <xTaskIncrementTick>:
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    16b0:	81 11       	cpse	r24, r1
    16b2:	9d c0       	rjmp	.+314    	; 0x17ee <xTaskIncrementTick+0x150>
    16b4:	e0 90 99 05 	lds	r14, 0x0599	; 0x800599 <xTickCount>
    16b8:	f0 90 9a 05 	lds	r15, 0x059A	; 0x80059a <xTickCount+0x1>
    16bc:	8f ef       	ldi	r24, 0xFF	; 255
    16be:	e8 1a       	sub	r14, r24
    16c0:	f8 0a       	sbc	r15, r24
    16c2:	f0 92 9a 05 	sts	0x059A, r15	; 0x80059a <xTickCount+0x1>
    16c6:	e0 92 99 05 	sts	0x0599, r14	; 0x800599 <xTickCount>
    16ca:	e1 14       	cp	r14, r1
    16cc:	f1 04       	cpc	r15, r1
    16ce:	b9 f4       	brne	.+46     	; 0x16fe <xTaskIncrementTick+0x60>
    16d0:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <pxDelayedTaskList>
    16d4:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <pxDelayedTaskList+0x1>
    16d8:	20 91 a5 05 	lds	r18, 0x05A5	; 0x8005a5 <pxOverflowDelayedTaskList>
    16dc:	30 91 a6 05 	lds	r19, 0x05A6	; 0x8005a6 <pxOverflowDelayedTaskList+0x1>
    16e0:	30 93 a8 05 	sts	0x05A8, r19	; 0x8005a8 <pxDelayedTaskList+0x1>
    16e4:	20 93 a7 05 	sts	0x05A7, r18	; 0x8005a7 <pxDelayedTaskList>
    16e8:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <pxOverflowDelayedTaskList+0x1>
    16ec:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <pxOverflowDelayedTaskList>
    16f0:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <xNumOfOverflows>
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <xNumOfOverflows>
    16fa:	0e 94 4d 09 	call	0x129a	; 0x129a <prvResetNextTaskUnblockTime>
    16fe:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <xNextTaskUnblockTime>
    1702:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <xNextTaskUnblockTime+0x1>
    1706:	e8 16       	cp	r14, r24
    1708:	f9 06       	cpc	r15, r25
    170a:	28 f4       	brcc	.+10     	; 0x1716 <xTaskIncrementTick+0x78>
    170c:	d1 2c       	mov	r13, r1
    170e:	53 c0       	rjmp	.+166    	; 0x17b6 <xTaskIncrementTick+0x118>
    1710:	dd 24       	eor	r13, r13
    1712:	d3 94       	inc	r13
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <xTaskIncrementTick+0x7a>
    1716:	d1 2c       	mov	r13, r1
    1718:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <pxDelayedTaskList>
    171c:	f0 91 a8 05 	lds	r31, 0x05A8	; 0x8005a8 <pxDelayedTaskList+0x1>
    1720:	80 81       	ld	r24, Z
    1722:	81 11       	cpse	r24, r1
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <xTaskIncrementTick+0x96>
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	9f ef       	ldi	r25, 0xFF	; 255
    172a:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    172e:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    1732:	41 c0       	rjmp	.+130    	; 0x17b6 <xTaskIncrementTick+0x118>
    1734:	e0 91 a7 05 	lds	r30, 0x05A7	; 0x8005a7 <pxDelayedTaskList>
    1738:	f0 91 a8 05 	lds	r31, 0x05A8	; 0x8005a8 <pxDelayedTaskList+0x1>
    173c:	05 80       	ldd	r0, Z+5	; 0x05
    173e:	f6 81       	ldd	r31, Z+6	; 0x06
    1740:	e0 2d       	mov	r30, r0
    1742:	c6 81       	ldd	r28, Z+6	; 0x06
    1744:	d7 81       	ldd	r29, Z+7	; 0x07
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	e8 16       	cp	r14, r24
    174c:	f9 06       	cpc	r15, r25
    174e:	28 f4       	brcc	.+10     	; 0x175a <xTaskIncrementTick+0xbc>
    1750:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    1754:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    1758:	2e c0       	rjmp	.+92     	; 0x17b6 <xTaskIncrementTick+0x118>
    175a:	8e 01       	movw	r16, r28
    175c:	0e 5f       	subi	r16, 0xFE	; 254
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	c8 01       	movw	r24, r16
    1762:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
    1766:	8c 89       	ldd	r24, Y+20	; 0x14
    1768:	9d 89       	ldd	r25, Y+21	; 0x15
    176a:	89 2b       	or	r24, r25
    176c:	21 f0       	breq	.+8      	; 0x1776 <xTaskIncrementTick+0xd8>
    176e:	ce 01       	movw	r24, r28
    1770:	0c 96       	adiw	r24, 0x0c	; 12
    1772:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
    1776:	8e 89       	ldd	r24, Y+22	; 0x16
    1778:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <uxTopReadyPriority>
    177c:	98 17       	cp	r25, r24
    177e:	10 f4       	brcc	.+4      	; 0x1784 <xTaskIncrementTick+0xe6>
    1780:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <uxTopReadyPriority>
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9c 01       	movw	r18, r24
    1788:	22 0f       	add	r18, r18
    178a:	33 1f       	adc	r19, r19
    178c:	22 0f       	add	r18, r18
    178e:	33 1f       	adc	r19, r19
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	82 0f       	add	r24, r18
    1796:	93 1f       	adc	r25, r19
    1798:	b8 01       	movw	r22, r16
    179a:	85 54       	subi	r24, 0x45	; 69
    179c:	9a 4f       	sbci	r25, 0xFA	; 250
    179e:	0e 94 9b 01 	call	0x336	; 0x336 <vListInsertEnd>
    17a2:	9e 89       	ldd	r25, Y+22	; 0x16
    17a4:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    17a8:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    17ac:	86 89       	ldd	r24, Z+22	; 0x16
    17ae:	98 17       	cp	r25, r24
    17b0:	08 f0       	brcs	.+2      	; 0x17b4 <xTaskIncrementTick+0x116>
    17b2:	ae cf       	rjmp	.-164    	; 0x1710 <xTaskIncrementTick+0x72>
    17b4:	b1 cf       	rjmp	.-158    	; 0x1718 <xTaskIncrementTick+0x7a>
    17b6:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    17ba:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    17be:	86 89       	ldd	r24, Z+22	; 0x16
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	fc 01       	movw	r30, r24
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	ee 0f       	add	r30, r30
    17ca:	ff 1f       	adc	r31, r31
    17cc:	ee 0f       	add	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	8e 0f       	add	r24, r30
    17d2:	9f 1f       	adc	r25, r31
    17d4:	fc 01       	movw	r30, r24
    17d6:	e5 54       	subi	r30, 0x45	; 69
    17d8:	fa 4f       	sbci	r31, 0xFA	; 250
    17da:	80 81       	ld	r24, Z
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	10 f0       	brcs	.+4      	; 0x17e4 <xTaskIncrementTick+0x146>
    17e0:	dd 24       	eor	r13, r13
    17e2:	d3 94       	inc	r13
    17e4:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <xYieldPending>
    17e8:	81 11       	cpse	r24, r1
    17ea:	0c c0       	rjmp	.+24     	; 0x1804 <xTaskIncrementTick+0x166>
    17ec:	0d c0       	rjmp	.+26     	; 0x1808 <xTaskIncrementTick+0x16a>
    17ee:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <xPendedTicks>
    17f2:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <xPendedTicks+0x1>
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <xPendedTicks+0x1>
    17fc:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <xPendedTicks>
    1800:	d1 2c       	mov	r13, r1
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <xTaskIncrementTick+0x16a>
    1804:	dd 24       	eor	r13, r13
    1806:	d3 94       	inc	r13
    1808:	8d 2d       	mov	r24, r13
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	df 90       	pop	r13
    1818:	08 95       	ret

0000181a <xTaskResumeAll>:
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	0f 92       	push	r0
    1828:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    182c:	81 50       	subi	r24, 0x01	; 1
    182e:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <uxSchedulerSuspended>
    1832:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    1836:	81 11       	cpse	r24, r1
    1838:	5c c0       	rjmp	.+184    	; 0x18f2 <xTaskResumeAll+0xd8>
    183a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <uxCurrentNumberOfTasks>
    183e:	81 11       	cpse	r24, r1
    1840:	33 c0       	rjmp	.+102    	; 0x18a8 <xTaskResumeAll+0x8e>
    1842:	5a c0       	rjmp	.+180    	; 0x18f8 <xTaskResumeAll+0xde>
    1844:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <xPendingReadyList+0x5>
    1848:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <xPendingReadyList+0x6>
    184c:	c6 81       	ldd	r28, Z+6	; 0x06
    184e:	d7 81       	ldd	r29, Z+7	; 0x07
    1850:	ce 01       	movw	r24, r28
    1852:	0c 96       	adiw	r24, 0x0c	; 12
    1854:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
    1858:	8e 01       	movw	r16, r28
    185a:	0e 5f       	subi	r16, 0xFE	; 254
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	c8 01       	movw	r24, r16
    1860:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
    1864:	8e 89       	ldd	r24, Y+22	; 0x16
    1866:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <uxTopReadyPriority>
    186a:	98 17       	cp	r25, r24
    186c:	10 f4       	brcc	.+4      	; 0x1872 <xTaskResumeAll+0x58>
    186e:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <uxTopReadyPriority>
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 01       	movw	r18, r24
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	22 0f       	add	r18, r18
    1880:	33 1f       	adc	r19, r19
    1882:	82 0f       	add	r24, r18
    1884:	93 1f       	adc	r25, r19
    1886:	b8 01       	movw	r22, r16
    1888:	85 54       	subi	r24, 0x45	; 69
    188a:	9a 4f       	sbci	r25, 0xFA	; 250
    188c:	0e 94 9b 01 	call	0x336	; 0x336 <vListInsertEnd>
    1890:	9e 89       	ldd	r25, Y+22	; 0x16
    1892:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1896:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    189a:	86 89       	ldd	r24, Z+22	; 0x16
    189c:	98 17       	cp	r25, r24
    189e:	30 f0       	brcs	.+12     	; 0x18ac <xTaskResumeAll+0x92>
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <xYieldPending>
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <xTaskResumeAll+0x92>
    18a8:	c0 e0       	ldi	r28, 0x00	; 0
    18aa:	d0 e0       	ldi	r29, 0x00	; 0
    18ac:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <xPendingReadyList>
    18b0:	81 11       	cpse	r24, r1
    18b2:	c8 cf       	rjmp	.-112    	; 0x1844 <xTaskResumeAll+0x2a>
    18b4:	cd 2b       	or	r28, r29
    18b6:	11 f0       	breq	.+4      	; 0x18bc <xTaskResumeAll+0xa2>
    18b8:	0e 94 4d 09 	call	0x129a	; 0x129a <prvResetNextTaskUnblockTime>
    18bc:	c0 91 95 05 	lds	r28, 0x0595	; 0x800595 <xPendedTicks>
    18c0:	d0 91 96 05 	lds	r29, 0x0596	; 0x800596 <xPendedTicks+0x1>
    18c4:	20 97       	sbiw	r28, 0x00	; 0
    18c6:	69 f0       	breq	.+26     	; 0x18e2 <xTaskResumeAll+0xc8>
    18c8:	0e 94 4f 0b 	call	0x169e	; 0x169e <xTaskIncrementTick>
    18cc:	88 23       	and	r24, r24
    18ce:	19 f0       	breq	.+6      	; 0x18d6 <xTaskResumeAll+0xbc>
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <xYieldPending>
    18d6:	21 97       	sbiw	r28, 0x01	; 1
    18d8:	b9 f7       	brne	.-18     	; 0x18c8 <xTaskResumeAll+0xae>
    18da:	10 92 96 05 	sts	0x0596, r1	; 0x800596 <xPendedTicks+0x1>
    18de:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <xPendedTicks>
    18e2:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <xYieldPending>
    18e6:	88 23       	and	r24, r24
    18e8:	31 f0       	breq	.+12     	; 0x18f6 <xTaskResumeAll+0xdc>
    18ea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortYield>
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <xTaskResumeAll+0xde>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <xTaskResumeAll+0xde>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	08 95       	ret

00001906 <xTaskDelayUntil>:
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	8c 01       	movw	r16, r24
    1910:	eb 01       	movw	r28, r22
    1912:	0e 94 3f 0b 	call	0x167e	; 0x167e <vTaskSuspendAll>
    1916:	40 91 99 05 	lds	r20, 0x0599	; 0x800599 <xTickCount>
    191a:	50 91 9a 05 	lds	r21, 0x059A	; 0x80059a <xTickCount+0x1>
    191e:	f8 01       	movw	r30, r16
    1920:	20 81       	ld	r18, Z
    1922:	31 81       	ldd	r19, Z+1	; 0x01
    1924:	c9 01       	movw	r24, r18
    1926:	8c 0f       	add	r24, r28
    1928:	9d 1f       	adc	r25, r29
    192a:	42 17       	cp	r20, r18
    192c:	53 07       	cpc	r21, r19
    192e:	40 f4       	brcc	.+16     	; 0x1940 <xTaskDelayUntil+0x3a>
    1930:	82 17       	cp	r24, r18
    1932:	93 07       	cpc	r25, r19
    1934:	68 f4       	brcc	.+26     	; 0x1950 <xTaskDelayUntil+0x4a>
    1936:	48 17       	cp	r20, r24
    1938:	59 07       	cpc	r21, r25
    193a:	60 f0       	brcs	.+24     	; 0x1954 <xTaskDelayUntil+0x4e>
    193c:	c0 e0       	ldi	r28, 0x00	; 0
    193e:	0f c0       	rjmp	.+30     	; 0x195e <xTaskDelayUntil+0x58>
    1940:	82 17       	cp	r24, r18
    1942:	93 07       	cpc	r25, r19
    1944:	48 f0       	brcs	.+18     	; 0x1958 <xTaskDelayUntil+0x52>
    1946:	48 17       	cp	r20, r24
    1948:	59 07       	cpc	r21, r25
    194a:	40 f0       	brcs	.+16     	; 0x195c <xTaskDelayUntil+0x56>
    194c:	c0 e0       	ldi	r28, 0x00	; 0
    194e:	07 c0       	rjmp	.+14     	; 0x195e <xTaskDelayUntil+0x58>
    1950:	c0 e0       	ldi	r28, 0x00	; 0
    1952:	05 c0       	rjmp	.+10     	; 0x195e <xTaskDelayUntil+0x58>
    1954:	c1 e0       	ldi	r28, 0x01	; 1
    1956:	03 c0       	rjmp	.+6      	; 0x195e <xTaskDelayUntil+0x58>
    1958:	c1 e0       	ldi	r28, 0x01	; 1
    195a:	01 c0       	rjmp	.+2      	; 0x195e <xTaskDelayUntil+0x58>
    195c:	c1 e0       	ldi	r28, 0x01	; 1
    195e:	f8 01       	movw	r30, r16
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
    1964:	cc 23       	and	r28, r28
    1966:	29 f0       	breq	.+10     	; 0x1972 <xTaskDelayUntil+0x6c>
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	84 1b       	sub	r24, r20
    196c:	95 0b       	sbc	r25, r21
    196e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <prvAddCurrentTaskToDelayedList>
    1972:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskResumeAll>
    1976:	81 11       	cpse	r24, r1
    1978:	02 c0       	rjmp	.+4      	; 0x197e <xTaskDelayUntil+0x78>
    197a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortYield>
    197e:	8c 2f       	mov	r24, r28
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	08 95       	ret

0000198a <vTaskDelay>:
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	ec 01       	movw	r28, r24
    1990:	89 2b       	or	r24, r25
    1992:	49 f0       	breq	.+18     	; 0x19a6 <vTaskDelay+0x1c>
    1994:	0e 94 3f 0b 	call	0x167e	; 0x167e <vTaskSuspendAll>
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	ce 01       	movw	r24, r28
    199c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <prvAddCurrentTaskToDelayedList>
    19a0:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskResumeAll>
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <vTaskDelay+0x1e>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	81 11       	cpse	r24, r1
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <vTaskDelay+0x26>
    19ac:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortYield>
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <vTaskSwitchContext>:
    19b6:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    19ba:	88 23       	and	r24, r24
    19bc:	21 f0       	breq	.+8      	; 0x19c6 <vTaskSwitchContext+0x10>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <xYieldPending>
    19c4:	08 95       	ret
    19c6:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <xYieldPending>
    19ca:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <uxTopReadyPriority>
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <vTaskSwitchContext+0x1c>
    19d0:	21 50       	subi	r18, 0x01	; 1
    19d2:	82 2f       	mov	r24, r18
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	fc 01       	movw	r30, r24
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	ee 0f       	add	r30, r30
    19e2:	ff 1f       	adc	r31, r31
    19e4:	e8 0f       	add	r30, r24
    19e6:	f9 1f       	adc	r31, r25
    19e8:	e5 54       	subi	r30, 0x45	; 69
    19ea:	fa 4f       	sbci	r31, 0xFA	; 250
    19ec:	30 81       	ld	r19, Z
    19ee:	33 23       	and	r19, r19
    19f0:	79 f3       	breq	.-34     	; 0x19d0 <vTaskSwitchContext+0x1a>
    19f2:	ac 01       	movw	r20, r24
    19f4:	44 0f       	add	r20, r20
    19f6:	55 1f       	adc	r21, r21
    19f8:	44 0f       	add	r20, r20
    19fa:	55 1f       	adc	r21, r21
    19fc:	44 0f       	add	r20, r20
    19fe:	55 1f       	adc	r21, r21
    1a00:	48 0f       	add	r20, r24
    1a02:	59 1f       	adc	r21, r25
    1a04:	df 01       	movw	r26, r30
    1a06:	01 80       	ldd	r0, Z+1	; 0x01
    1a08:	f2 81       	ldd	r31, Z+2	; 0x02
    1a0a:	e0 2d       	mov	r30, r0
    1a0c:	02 80       	ldd	r0, Z+2	; 0x02
    1a0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a10:	e0 2d       	mov	r30, r0
    1a12:	12 96       	adiw	r26, 0x02	; 2
    1a14:	fc 93       	st	X, r31
    1a16:	ee 93       	st	-X, r30
    1a18:	11 97       	sbiw	r26, 0x01	; 1
    1a1a:	42 54       	subi	r20, 0x42	; 66
    1a1c:	5a 4f       	sbci	r21, 0xFA	; 250
    1a1e:	e4 17       	cp	r30, r20
    1a20:	f5 07       	cpc	r31, r21
    1a22:	29 f4       	brne	.+10     	; 0x1a2e <vTaskSwitchContext+0x78>
    1a24:	42 81       	ldd	r20, Z+2	; 0x02
    1a26:	53 81       	ldd	r21, Z+3	; 0x03
    1a28:	fd 01       	movw	r30, r26
    1a2a:	52 83       	std	Z+2, r21	; 0x02
    1a2c:	41 83       	std	Z+1, r20	; 0x01
    1a2e:	fc 01       	movw	r30, r24
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	ee 0f       	add	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	8e 0f       	add	r24, r30
    1a3e:	9f 1f       	adc	r25, r31
    1a40:	fc 01       	movw	r30, r24
    1a42:	e5 54       	subi	r30, 0x45	; 69
    1a44:	fa 4f       	sbci	r31, 0xFA	; 250
    1a46:	01 80       	ldd	r0, Z+1	; 0x01
    1a48:	f2 81       	ldd	r31, Z+2	; 0x02
    1a4a:	e0 2d       	mov	r30, r0
    1a4c:	86 81       	ldd	r24, Z+6	; 0x06
    1a4e:	97 81       	ldd	r25, Z+7	; 0x07
    1a50:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <pxCurrentTCB+0x1>
    1a54:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <pxCurrentTCB>
    1a58:	20 93 98 05 	sts	0x0598, r18	; 0x800598 <uxTopReadyPriority>
    1a5c:	08 95       	ret

00001a5e <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
    1a5e:	8f 92       	push	r8
    1a60:	9f 92       	push	r9
    1a62:	af 92       	push	r10
    1a64:	bf 92       	push	r11
    1a66:	cf 92       	push	r12
    1a68:	df 92       	push	r13
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	48 01       	movw	r8, r16
    1a78:	59 01       	movw	r10, r18
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	0f 92       	push	r0
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
    1a80:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1a84:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1a88:	c8 2f       	mov	r28, r24
    1a8a:	d0 e0       	ldi	r29, 0x00	; 0
    1a8c:	ec 0f       	add	r30, r28
    1a8e:	fd 1f       	adc	r31, r29
    1a90:	87 a1       	ldd	r24, Z+39	; 0x27
    1a92:	82 30       	cpi	r24, 0x02	; 2
    1a94:	61 f1       	breq	.+88     	; 0x1aee <xTaskGenericNotifyWait+0x90>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
    1a96:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1a9a:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	e8 0f       	add	r30, r24
    1aaa:	f9 1f       	adc	r31, r25
    1aac:	83 a1       	ldd	r24, Z+35	; 0x23
    1aae:	94 a1       	ldd	r25, Z+36	; 0x24
    1ab0:	a5 a1       	ldd	r26, Z+37	; 0x25
    1ab2:	b6 a1       	ldd	r27, Z+38	; 0x26
    1ab4:	40 95       	com	r20
    1ab6:	50 95       	com	r21
    1ab8:	60 95       	com	r22
    1aba:	70 95       	com	r23
    1abc:	48 23       	and	r20, r24
    1abe:	59 23       	and	r21, r25
    1ac0:	6a 23       	and	r22, r26
    1ac2:	7b 23       	and	r23, r27
    1ac4:	43 a3       	std	Z+35, r20	; 0x23
    1ac6:	54 a3       	std	Z+36, r21	; 0x24
    1ac8:	65 a3       	std	Z+37, r22	; 0x25
    1aca:	76 a3       	std	Z+38, r23	; 0x26

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
    1acc:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1ad0:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1ad4:	ec 0f       	add	r30, r28
    1ad6:	fd 1f       	adc	r31, r29
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	87 a3       	std	Z+39, r24	; 0x27

                if( xTicksToWait > ( TickType_t ) 0 )
    1adc:	c1 14       	cp	r12, r1
    1ade:	d1 04       	cpc	r13, r1
    1ae0:	31 f0       	breq	.+12     	; 0x1aee <xTaskGenericNotifyWait+0x90>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	c6 01       	movw	r24, r12
    1ae6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
    1aea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63

        taskENTER_CRITICAL();
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	0f 92       	push	r0
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
    1af8:	e1 14       	cp	r14, r1
    1afa:	f1 04       	cpc	r15, r1
    1afc:	a1 f0       	breq	.+40     	; 0x1b26 <xTaskGenericNotifyWait+0xc8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
    1afe:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1b02:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1b06:	ce 01       	movw	r24, r28
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	e8 0f       	add	r30, r24
    1b12:	f9 1f       	adc	r31, r25
    1b14:	83 a1       	ldd	r24, Z+35	; 0x23
    1b16:	94 a1       	ldd	r25, Z+36	; 0x24
    1b18:	a5 a1       	ldd	r26, Z+37	; 0x25
    1b1a:	b6 a1       	ldd	r27, Z+38	; 0x26
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	80 83       	st	Z, r24
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	a2 83       	std	Z+2, r26	; 0x02
    1b24:	b3 83       	std	Z+3, r27	; 0x03

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
    1b26:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1b2a:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1b2e:	ec 0f       	add	r30, r28
    1b30:	fd 1f       	adc	r31, r29
    1b32:	87 a1       	ldd	r24, Z+39	; 0x27
    1b34:	82 30       	cpi	r24, 0x02	; 2
    1b36:	e9 f4       	brne	.+58     	; 0x1b72 <xTaskGenericNotifyWait+0x114>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
    1b38:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1b3c:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1b40:	ce 01       	movw	r24, r28
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	e8 0f       	add	r30, r24
    1b4c:	f9 1f       	adc	r31, r25
    1b4e:	83 a1       	ldd	r24, Z+35	; 0x23
    1b50:	94 a1       	ldd	r25, Z+36	; 0x24
    1b52:	a5 a1       	ldd	r26, Z+37	; 0x25
    1b54:	b6 a1       	ldd	r27, Z+38	; 0x26
    1b56:	80 94       	com	r8
    1b58:	90 94       	com	r9
    1b5a:	a0 94       	com	r10
    1b5c:	b0 94       	com	r11
    1b5e:	88 22       	and	r8, r24
    1b60:	99 22       	and	r9, r25
    1b62:	aa 22       	and	r10, r26
    1b64:	bb 22       	and	r11, r27
    1b66:	83 a2       	std	Z+35, r8	; 0x23
    1b68:	94 a2       	std	Z+36, r9	; 0x24
    1b6a:	a5 a2       	std	Z+37, r10	; 0x25
    1b6c:	b6 a2       	std	Z+38, r11	; 0x26
                xReturn = pdTRUE;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <xTaskGenericNotifyWait+0x116>
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
    1b72:	80 e0       	ldi	r24, 0x00	; 0
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
                xReturn = pdTRUE;
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
    1b74:	20 91 df 05 	lds	r18, 0x05DF	; 0x8005df <pxCurrentTCB>
    1b78:	30 91 e0 05 	lds	r19, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1b7c:	c2 0f       	add	r28, r18
    1b7e:	d3 1f       	adc	r29, r19
    1b80:	1f a2       	std	Y+39, r1	; 0x27
        }
        taskEXIT_CRITICAL();
    1b82:	0f 90       	pop	r0
    1b84:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	bf 90       	pop	r11
    1b98:	af 90       	pop	r10
    1b9a:	9f 90       	pop	r9
    1b9c:	8f 90       	pop	r8
    1b9e:	08 95       	ret

00001ba0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
    1ba0:	8f 92       	push	r8
    1ba2:	9f 92       	push	r9
    1ba4:	af 92       	push	r10
    1ba6:	bf 92       	push	r11
    1ba8:	ef 92       	push	r14
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;

        taskENTER_CRITICAL();
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	0f 92       	push	r0
        {
            if( pulPreviousNotificationValue != NULL )
    1bb8:	e1 14       	cp	r14, r1
    1bba:	f1 04       	cpc	r15, r1
    1bbc:	89 f0       	breq	.+34     	; 0x1be0 <xTaskGenericNotify+0x40>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    1bbe:	e6 2f       	mov	r30, r22
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	e8 0f       	add	r30, r24
    1bcc:	f9 1f       	adc	r31, r25
    1bce:	83 a0       	ldd	r8, Z+35	; 0x23
    1bd0:	94 a0       	ldd	r9, Z+36	; 0x24
    1bd2:	a5 a0       	ldd	r10, Z+37	; 0x25
    1bd4:	b6 a0       	ldd	r11, Z+38	; 0x26
    1bd6:	f7 01       	movw	r30, r14
    1bd8:	80 82       	st	Z, r8
    1bda:	91 82       	std	Z+1, r9	; 0x01
    1bdc:	a2 82       	std	Z+2, r10	; 0x02
    1bde:	b3 82       	std	Z+3, r11	; 0x03
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	fc 01       	movw	r30, r24
    1be4:	e6 0f       	add	r30, r22
    1be6:	f7 1f       	adc	r31, r23
    1be8:	a7 a1       	ldd	r26, Z+39	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    1bea:	b2 e0       	ldi	r27, 0x02	; 2
    1bec:	b7 a3       	std	Z+39, r27	; 0x27

            switch( eAction )
    1bee:	02 30       	cpi	r16, 0x02	; 2
    1bf0:	01 f1       	breq	.+64     	; 0x1c32 <xTaskGenericNotify+0x92>
    1bf2:	18 f4       	brcc	.+6      	; 0x1bfa <xTaskGenericNotify+0x5a>
    1bf4:	01 30       	cpi	r16, 0x01	; 1
    1bf6:	31 f0       	breq	.+12     	; 0x1c04 <xTaskGenericNotify+0x64>
    1bf8:	4d c0       	rjmp	.+154    	; 0x1c94 <xTaskGenericNotify+0xf4>
    1bfa:	03 30       	cpi	r16, 0x03	; 3
    1bfc:	79 f1       	breq	.+94     	; 0x1c5c <xTaskGenericNotify+0xbc>
    1bfe:	04 30       	cpi	r16, 0x04	; 4
    1c00:	d1 f1       	breq	.+116    	; 0x1c76 <xTaskGenericNotify+0xd6>
    1c02:	48 c0       	rjmp	.+144    	; 0x1c94 <xTaskGenericNotify+0xf4>
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    1c04:	66 0f       	add	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	66 0f       	add	r22, r22
    1c0a:	77 1f       	adc	r23, r23
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	e6 0f       	add	r30, r22
    1c10:	f7 1f       	adc	r31, r23
    1c12:	83 a0       	ldd	r8, Z+35	; 0x23
    1c14:	94 a0       	ldd	r9, Z+36	; 0x24
    1c16:	a5 a0       	ldd	r10, Z+37	; 0x25
    1c18:	b6 a0       	ldd	r11, Z+38	; 0x26
    1c1a:	ba 01       	movw	r22, r20
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	48 29       	or	r20, r8
    1c20:	59 29       	or	r21, r9
    1c22:	6a 29       	or	r22, r10
    1c24:	7b 29       	or	r23, r11
    1c26:	43 a3       	std	Z+35, r20	; 0x23
    1c28:	54 a3       	std	Z+36, r21	; 0x24
    1c2a:	65 a3       	std	Z+37, r22	; 0x25
    1c2c:	76 a3       	std	Z+38, r23	; 0x26
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
    1c2e:	01 e0       	ldi	r16, 0x01	; 1

            switch( eAction )
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
                    break;
    1c30:	34 c0       	rjmp	.+104    	; 0x1c9a <xTaskGenericNotify+0xfa>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    1c32:	66 0f       	add	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	66 0f       	add	r22, r22
    1c38:	77 1f       	adc	r23, r23
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e6 0f       	add	r30, r22
    1c3e:	f7 1f       	adc	r31, r23
    1c40:	43 a1       	ldd	r20, Z+35	; 0x23
    1c42:	54 a1       	ldd	r21, Z+36	; 0x24
    1c44:	65 a1       	ldd	r22, Z+37	; 0x25
    1c46:	76 a1       	ldd	r23, Z+38	; 0x26
    1c48:	4f 5f       	subi	r20, 0xFF	; 255
    1c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4c:	6f 4f       	sbci	r22, 0xFF	; 255
    1c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c50:	43 a3       	std	Z+35, r20	; 0x23
    1c52:	54 a3       	std	Z+36, r21	; 0x24
    1c54:	65 a3       	std	Z+37, r22	; 0x25
    1c56:	76 a3       	std	Z+38, r23	; 0x26
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
    1c58:	01 e0       	ldi	r16, 0x01	; 1
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
                    break;

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
                    break;
    1c5a:	1f c0       	rjmp	.+62     	; 0x1c9a <xTaskGenericNotify+0xfa>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    1c5c:	66 0f       	add	r22, r22
    1c5e:	77 1f       	adc	r23, r23
    1c60:	66 0f       	add	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	fc 01       	movw	r30, r24
    1c66:	e6 0f       	add	r30, r22
    1c68:	f7 1f       	adc	r31, r23
    1c6a:	23 a3       	std	Z+35, r18	; 0x23
    1c6c:	34 a3       	std	Z+36, r19	; 0x24
    1c6e:	45 a3       	std	Z+37, r20	; 0x25
    1c70:	56 a3       	std	Z+38, r21	; 0x26
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
    1c72:	01 e0       	ldi	r16, 0x01	; 1
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
                    break;

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    break;
    1c74:	12 c0       	rjmp	.+36     	; 0x1c9a <xTaskGenericNotify+0xfa>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    1c76:	a2 30       	cpi	r26, 0x02	; 2
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    1c7a:	66 0f       	add	r22, r22
    1c7c:	77 1f       	adc	r23, r23
    1c7e:	66 0f       	add	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	fc 01       	movw	r30, r24
    1c84:	e6 0f       	add	r30, r22
    1c86:	f7 1f       	adc	r31, r23
    1c88:	23 a3       	std	Z+35, r18	; 0x23
    1c8a:	34 a3       	std	Z+36, r19	; 0x24
    1c8c:	45 a3       	std	Z+37, r20	; 0x25
    1c8e:	56 a3       	std	Z+38, r21	; 0x26
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
    1c90:	01 e0       	ldi	r16, 0x01	; 1
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <xTaskGenericNotify+0xfa>
    1c94:	01 e0       	ldi	r16, 0x01	; 1
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <xTaskGenericNotify+0xfa>
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
                    }
                    else
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
    1c98:	00 e0       	ldi	r16, 0x00	; 0

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    1c9a:	a1 30       	cpi	r26, 0x01	; 1
    1c9c:	41 f5       	brne	.+80     	; 0x1cee <xTaskGenericNotify+0x14e>
    1c9e:	ec 01       	movw	r28, r24
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1ca0:	7c 01       	movw	r14, r24
    1ca2:	f2 e0       	ldi	r31, 0x02	; 2
    1ca4:	ef 0e       	add	r14, r31
    1ca6:	f1 1c       	adc	r15, r1
    1ca8:	c7 01       	movw	r24, r14
    1caa:	0e 94 ed 01 	call	0x3da	; 0x3da <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
    1cae:	8e 89       	ldd	r24, Y+22	; 0x16
    1cb0:	90 91 98 05 	lds	r25, 0x0598	; 0x800598 <uxTopReadyPriority>
    1cb4:	98 17       	cp	r25, r24
    1cb6:	10 f4       	brcc	.+4      	; 0x1cbc <xTaskGenericNotify+0x11c>
    1cb8:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <uxTopReadyPriority>
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9c 01       	movw	r18, r24
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	22 0f       	add	r18, r18
    1cc6:	33 1f       	adc	r19, r19
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	82 0f       	add	r24, r18
    1cce:	93 1f       	adc	r25, r19
    1cd0:	b7 01       	movw	r22, r14
    1cd2:	85 54       	subi	r24, 0x45	; 69
    1cd4:	9a 4f       	sbci	r25, 0xFA	; 250
    1cd6:	0e 94 9b 01 	call	0x336	; 0x336 <vListInsertEnd>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    1cda:	9e 89       	ldd	r25, Y+22	; 0x16
    1cdc:	e0 91 df 05 	lds	r30, 0x05DF	; 0x8005df <pxCurrentTCB>
    1ce0:	f0 91 e0 05 	lds	r31, 0x05E0	; 0x8005e0 <pxCurrentTCB+0x1>
    1ce4:	86 89       	ldd	r24, Z+22	; 0x16
    1ce6:	89 17       	cp	r24, r25
    1ce8:	10 f4       	brcc	.+4      	; 0x1cee <xTaskGenericNotify+0x14e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
    1cea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    1cf2:	80 2f       	mov	r24, r16
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	bf 90       	pop	r11
    1d00:	af 90       	pop	r10
    1d02:	9f 90       	pop	r9
    1d04:	8f 90       	pop	r8
    1d06:	08 95       	ret

00001d08 <__subsf3>:
    1d08:	50 58       	subi	r21, 0x80	; 128

00001d0a <__addsf3>:
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	aa 27       	eor	r26, r26
    1d0e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__addsf3x>
    1d12:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__fp_round>
    1d16:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fp_pscA>
    1d1a:	38 f0       	brcs	.+14     	; 0x1d2a <__addsf3+0x20>
    1d1c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fp_pscB>
    1d20:	20 f0       	brcs	.+8      	; 0x1d2a <__addsf3+0x20>
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <__addsf3+0x28>
    1d24:	9f 3f       	cpi	r25, 0xFF	; 255
    1d26:	19 f4       	brne	.+6      	; 0x1d2e <__addsf3+0x24>
    1d28:	26 f4       	brtc	.+8      	; 0x1d32 <__addsf3+0x28>
    1d2a:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__fp_nan>
    1d2e:	0e f4       	brtc	.+2      	; 0x1d32 <__addsf3+0x28>
    1d30:	e0 95       	com	r30
    1d32:	e7 fb       	bst	r30, 7
    1d34:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__fp_inf>

00001d38 <__addsf3x>:
    1d38:	e9 2f       	mov	r30, r25
    1d3a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fp_split3>
    1d3e:	58 f3       	brcs	.-42     	; 0x1d16 <__addsf3+0xc>
    1d40:	ba 17       	cp	r27, r26
    1d42:	62 07       	cpc	r22, r18
    1d44:	73 07       	cpc	r23, r19
    1d46:	84 07       	cpc	r24, r20
    1d48:	95 07       	cpc	r25, r21
    1d4a:	20 f0       	brcs	.+8      	; 0x1d54 <__addsf3x+0x1c>
    1d4c:	79 f4       	brne	.+30     	; 0x1d6c <__addsf3x+0x34>
    1d4e:	a6 f5       	brtc	.+104    	; 0x1db8 <__addsf3x+0x80>
    1d50:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__fp_zero>
    1d54:	0e f4       	brtc	.+2      	; 0x1d58 <__addsf3x+0x20>
    1d56:	e0 95       	com	r30
    1d58:	0b 2e       	mov	r0, r27
    1d5a:	ba 2f       	mov	r27, r26
    1d5c:	a0 2d       	mov	r26, r0
    1d5e:	0b 01       	movw	r0, r22
    1d60:	b9 01       	movw	r22, r18
    1d62:	90 01       	movw	r18, r0
    1d64:	0c 01       	movw	r0, r24
    1d66:	ca 01       	movw	r24, r20
    1d68:	a0 01       	movw	r20, r0
    1d6a:	11 24       	eor	r1, r1
    1d6c:	ff 27       	eor	r31, r31
    1d6e:	59 1b       	sub	r21, r25
    1d70:	99 f0       	breq	.+38     	; 0x1d98 <__addsf3x+0x60>
    1d72:	59 3f       	cpi	r21, 0xF9	; 249
    1d74:	50 f4       	brcc	.+20     	; 0x1d8a <__addsf3x+0x52>
    1d76:	50 3e       	cpi	r21, 0xE0	; 224
    1d78:	68 f1       	brcs	.+90     	; 0x1dd4 <__addsf3x+0x9c>
    1d7a:	1a 16       	cp	r1, r26
    1d7c:	f0 40       	sbci	r31, 0x00	; 0
    1d7e:	a2 2f       	mov	r26, r18
    1d80:	23 2f       	mov	r18, r19
    1d82:	34 2f       	mov	r19, r20
    1d84:	44 27       	eor	r20, r20
    1d86:	58 5f       	subi	r21, 0xF8	; 248
    1d88:	f3 cf       	rjmp	.-26     	; 0x1d70 <__addsf3x+0x38>
    1d8a:	46 95       	lsr	r20
    1d8c:	37 95       	ror	r19
    1d8e:	27 95       	ror	r18
    1d90:	a7 95       	ror	r26
    1d92:	f0 40       	sbci	r31, 0x00	; 0
    1d94:	53 95       	inc	r21
    1d96:	c9 f7       	brne	.-14     	; 0x1d8a <__addsf3x+0x52>
    1d98:	7e f4       	brtc	.+30     	; 0x1db8 <__addsf3x+0x80>
    1d9a:	1f 16       	cp	r1, r31
    1d9c:	ba 0b       	sbc	r27, r26
    1d9e:	62 0b       	sbc	r22, r18
    1da0:	73 0b       	sbc	r23, r19
    1da2:	84 0b       	sbc	r24, r20
    1da4:	ba f0       	brmi	.+46     	; 0x1dd4 <__addsf3x+0x9c>
    1da6:	91 50       	subi	r25, 0x01	; 1
    1da8:	a1 f0       	breq	.+40     	; 0x1dd2 <__addsf3x+0x9a>
    1daa:	ff 0f       	add	r31, r31
    1dac:	bb 1f       	adc	r27, r27
    1dae:	66 1f       	adc	r22, r22
    1db0:	77 1f       	adc	r23, r23
    1db2:	88 1f       	adc	r24, r24
    1db4:	c2 f7       	brpl	.-16     	; 0x1da6 <__addsf3x+0x6e>
    1db6:	0e c0       	rjmp	.+28     	; 0x1dd4 <__addsf3x+0x9c>
    1db8:	ba 0f       	add	r27, r26
    1dba:	62 1f       	adc	r22, r18
    1dbc:	73 1f       	adc	r23, r19
    1dbe:	84 1f       	adc	r24, r20
    1dc0:	48 f4       	brcc	.+18     	; 0x1dd4 <__addsf3x+0x9c>
    1dc2:	87 95       	ror	r24
    1dc4:	77 95       	ror	r23
    1dc6:	67 95       	ror	r22
    1dc8:	b7 95       	ror	r27
    1dca:	f7 95       	ror	r31
    1dcc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <__addsf3x+0x9a>
    1dd0:	b0 cf       	rjmp	.-160    	; 0x1d32 <__addsf3+0x28>
    1dd2:	93 95       	inc	r25
    1dd4:	88 0f       	add	r24, r24
    1dd6:	08 f0       	brcs	.+2      	; 0x1dda <__addsf3x+0xa2>
    1dd8:	99 27       	eor	r25, r25
    1dda:	ee 0f       	add	r30, r30
    1ddc:	97 95       	ror	r25
    1dde:	87 95       	ror	r24
    1de0:	08 95       	ret

00001de2 <__divsf3>:
    1de2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <__divsf3x>
    1de6:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__fp_round>
    1dea:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fp_pscB>
    1dee:	58 f0       	brcs	.+22     	; 0x1e06 <__divsf3+0x24>
    1df0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fp_pscA>
    1df4:	40 f0       	brcs	.+16     	; 0x1e06 <__divsf3+0x24>
    1df6:	29 f4       	brne	.+10     	; 0x1e02 <__divsf3+0x20>
    1df8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dfa:	29 f0       	breq	.+10     	; 0x1e06 <__divsf3+0x24>
    1dfc:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__fp_inf>
    1e00:	51 11       	cpse	r21, r1
    1e02:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__fp_szero>
    1e06:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__fp_nan>

00001e0a <__divsf3x>:
    1e0a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fp_split3>
    1e0e:	68 f3       	brcs	.-38     	; 0x1dea <__divsf3+0x8>

00001e10 <__divsf3_pse>:
    1e10:	99 23       	and	r25, r25
    1e12:	b1 f3       	breq	.-20     	; 0x1e00 <__divsf3+0x1e>
    1e14:	55 23       	and	r21, r21
    1e16:	91 f3       	breq	.-28     	; 0x1dfc <__divsf3+0x1a>
    1e18:	95 1b       	sub	r25, r21
    1e1a:	55 0b       	sbc	r21, r21
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	aa 27       	eor	r26, r26
    1e20:	62 17       	cp	r22, r18
    1e22:	73 07       	cpc	r23, r19
    1e24:	84 07       	cpc	r24, r20
    1e26:	38 f0       	brcs	.+14     	; 0x1e36 <__divsf3_pse+0x26>
    1e28:	9f 5f       	subi	r25, 0xFF	; 255
    1e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2c:	22 0f       	add	r18, r18
    1e2e:	33 1f       	adc	r19, r19
    1e30:	44 1f       	adc	r20, r20
    1e32:	aa 1f       	adc	r26, r26
    1e34:	a9 f3       	breq	.-22     	; 0x1e20 <__divsf3_pse+0x10>
    1e36:	35 d0       	rcall	.+106    	; 0x1ea2 <__divsf3_pse+0x92>
    1e38:	0e 2e       	mov	r0, r30
    1e3a:	3a f0       	brmi	.+14     	; 0x1e4a <__divsf3_pse+0x3a>
    1e3c:	e0 e8       	ldi	r30, 0x80	; 128
    1e3e:	32 d0       	rcall	.+100    	; 0x1ea4 <__divsf3_pse+0x94>
    1e40:	91 50       	subi	r25, 0x01	; 1
    1e42:	50 40       	sbci	r21, 0x00	; 0
    1e44:	e6 95       	lsr	r30
    1e46:	00 1c       	adc	r0, r0
    1e48:	ca f7       	brpl	.-14     	; 0x1e3c <__divsf3_pse+0x2c>
    1e4a:	2b d0       	rcall	.+86     	; 0x1ea2 <__divsf3_pse+0x92>
    1e4c:	fe 2f       	mov	r31, r30
    1e4e:	29 d0       	rcall	.+82     	; 0x1ea2 <__divsf3_pse+0x92>
    1e50:	66 0f       	add	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	88 1f       	adc	r24, r24
    1e56:	bb 1f       	adc	r27, r27
    1e58:	26 17       	cp	r18, r22
    1e5a:	37 07       	cpc	r19, r23
    1e5c:	48 07       	cpc	r20, r24
    1e5e:	ab 07       	cpc	r26, r27
    1e60:	b0 e8       	ldi	r27, 0x80	; 128
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <__divsf3_pse+0x56>
    1e64:	bb 0b       	sbc	r27, r27
    1e66:	80 2d       	mov	r24, r0
    1e68:	bf 01       	movw	r22, r30
    1e6a:	ff 27       	eor	r31, r31
    1e6c:	93 58       	subi	r25, 0x83	; 131
    1e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e70:	3a f0       	brmi	.+14     	; 0x1e80 <__divsf3_pse+0x70>
    1e72:	9e 3f       	cpi	r25, 0xFE	; 254
    1e74:	51 05       	cpc	r21, r1
    1e76:	78 f0       	brcs	.+30     	; 0x1e96 <__divsf3_pse+0x86>
    1e78:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__fp_inf>
    1e7c:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__fp_szero>
    1e80:	5f 3f       	cpi	r21, 0xFF	; 255
    1e82:	e4 f3       	brlt	.-8      	; 0x1e7c <__divsf3_pse+0x6c>
    1e84:	98 3e       	cpi	r25, 0xE8	; 232
    1e86:	d4 f3       	brlt	.-12     	; 0x1e7c <__divsf3_pse+0x6c>
    1e88:	86 95       	lsr	r24
    1e8a:	77 95       	ror	r23
    1e8c:	67 95       	ror	r22
    1e8e:	b7 95       	ror	r27
    1e90:	f7 95       	ror	r31
    1e92:	9f 5f       	subi	r25, 0xFF	; 255
    1e94:	c9 f7       	brne	.-14     	; 0x1e88 <__divsf3_pse+0x78>
    1e96:	88 0f       	add	r24, r24
    1e98:	91 1d       	adc	r25, r1
    1e9a:	96 95       	lsr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	97 f9       	bld	r25, 7
    1ea0:	08 95       	ret
    1ea2:	e1 e0       	ldi	r30, 0x01	; 1
    1ea4:	66 0f       	add	r22, r22
    1ea6:	77 1f       	adc	r23, r23
    1ea8:	88 1f       	adc	r24, r24
    1eaa:	bb 1f       	adc	r27, r27
    1eac:	62 17       	cp	r22, r18
    1eae:	73 07       	cpc	r23, r19
    1eb0:	84 07       	cpc	r24, r20
    1eb2:	ba 07       	cpc	r27, r26
    1eb4:	20 f0       	brcs	.+8      	; 0x1ebe <__divsf3_pse+0xae>
    1eb6:	62 1b       	sub	r22, r18
    1eb8:	73 0b       	sbc	r23, r19
    1eba:	84 0b       	sbc	r24, r20
    1ebc:	ba 0b       	sbc	r27, r26
    1ebe:	ee 1f       	adc	r30, r30
    1ec0:	88 f7       	brcc	.-30     	; 0x1ea4 <__divsf3_pse+0x94>
    1ec2:	e0 95       	com	r30
    1ec4:	08 95       	ret

00001ec6 <__fixunssfsi>:
    1ec6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__fp_splitA>
    1eca:	88 f0       	brcs	.+34     	; 0x1eee <__fixunssfsi+0x28>
    1ecc:	9f 57       	subi	r25, 0x7F	; 127
    1ece:	98 f0       	brcs	.+38     	; 0x1ef6 <__fixunssfsi+0x30>
    1ed0:	b9 2f       	mov	r27, r25
    1ed2:	99 27       	eor	r25, r25
    1ed4:	b7 51       	subi	r27, 0x17	; 23
    1ed6:	b0 f0       	brcs	.+44     	; 0x1f04 <__fixunssfsi+0x3e>
    1ed8:	e1 f0       	breq	.+56     	; 0x1f12 <__fixunssfsi+0x4c>
    1eda:	66 0f       	add	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	1a f0       	brmi	.+6      	; 0x1eea <__fixunssfsi+0x24>
    1ee4:	ba 95       	dec	r27
    1ee6:	c9 f7       	brne	.-14     	; 0x1eda <__fixunssfsi+0x14>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <__fixunssfsi+0x4c>
    1eea:	b1 30       	cpi	r27, 0x01	; 1
    1eec:	91 f0       	breq	.+36     	; 0x1f12 <__fixunssfsi+0x4c>
    1eee:	0e 94 19 10 	call	0x2032	; 0x2032 <__fp_zero>
    1ef2:	b1 e0       	ldi	r27, 0x01	; 1
    1ef4:	08 95       	ret
    1ef6:	0c 94 19 10 	jmp	0x2032	; 0x2032 <__fp_zero>
    1efa:	67 2f       	mov	r22, r23
    1efc:	78 2f       	mov	r23, r24
    1efe:	88 27       	eor	r24, r24
    1f00:	b8 5f       	subi	r27, 0xF8	; 248
    1f02:	39 f0       	breq	.+14     	; 0x1f12 <__fixunssfsi+0x4c>
    1f04:	b9 3f       	cpi	r27, 0xF9	; 249
    1f06:	cc f3       	brlt	.-14     	; 0x1efa <__fixunssfsi+0x34>
    1f08:	86 95       	lsr	r24
    1f0a:	77 95       	ror	r23
    1f0c:	67 95       	ror	r22
    1f0e:	b3 95       	inc	r27
    1f10:	d9 f7       	brne	.-10     	; 0x1f08 <__fixunssfsi+0x42>
    1f12:	3e f4       	brtc	.+14     	; 0x1f22 <__fixunssfsi+0x5c>
    1f14:	90 95       	com	r25
    1f16:	80 95       	com	r24
    1f18:	70 95       	com	r23
    1f1a:	61 95       	neg	r22
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	08 95       	ret

00001f24 <__floatunsisf>:
    1f24:	e8 94       	clt
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <__floatsisf+0x12>

00001f28 <__floatsisf>:
    1f28:	97 fb       	bst	r25, 7
    1f2a:	3e f4       	brtc	.+14     	; 0x1f3a <__floatsisf+0x12>
    1f2c:	90 95       	com	r25
    1f2e:	80 95       	com	r24
    1f30:	70 95       	com	r23
    1f32:	61 95       	neg	r22
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	8f 4f       	sbci	r24, 0xFF	; 255
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	99 23       	and	r25, r25
    1f3c:	a9 f0       	breq	.+42     	; 0x1f68 <__floatsisf+0x40>
    1f3e:	f9 2f       	mov	r31, r25
    1f40:	96 e9       	ldi	r25, 0x96	; 150
    1f42:	bb 27       	eor	r27, r27
    1f44:	93 95       	inc	r25
    1f46:	f6 95       	lsr	r31
    1f48:	87 95       	ror	r24
    1f4a:	77 95       	ror	r23
    1f4c:	67 95       	ror	r22
    1f4e:	b7 95       	ror	r27
    1f50:	f1 11       	cpse	r31, r1
    1f52:	f8 cf       	rjmp	.-16     	; 0x1f44 <__floatsisf+0x1c>
    1f54:	fa f4       	brpl	.+62     	; 0x1f94 <__floatsisf+0x6c>
    1f56:	bb 0f       	add	r27, r27
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <__floatsisf+0x36>
    1f5a:	60 ff       	sbrs	r22, 0
    1f5c:	1b c0       	rjmp	.+54     	; 0x1f94 <__floatsisf+0x6c>
    1f5e:	6f 5f       	subi	r22, 0xFF	; 255
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	8f 4f       	sbci	r24, 0xFF	; 255
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	16 c0       	rjmp	.+44     	; 0x1f94 <__floatsisf+0x6c>
    1f68:	88 23       	and	r24, r24
    1f6a:	11 f0       	breq	.+4      	; 0x1f70 <__floatsisf+0x48>
    1f6c:	96 e9       	ldi	r25, 0x96	; 150
    1f6e:	11 c0       	rjmp	.+34     	; 0x1f92 <__floatsisf+0x6a>
    1f70:	77 23       	and	r23, r23
    1f72:	21 f0       	breq	.+8      	; 0x1f7c <__floatsisf+0x54>
    1f74:	9e e8       	ldi	r25, 0x8E	; 142
    1f76:	87 2f       	mov	r24, r23
    1f78:	76 2f       	mov	r23, r22
    1f7a:	05 c0       	rjmp	.+10     	; 0x1f86 <__floatsisf+0x5e>
    1f7c:	66 23       	and	r22, r22
    1f7e:	71 f0       	breq	.+28     	; 0x1f9c <__floatsisf+0x74>
    1f80:	96 e8       	ldi	r25, 0x86	; 134
    1f82:	86 2f       	mov	r24, r22
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	2a f0       	brmi	.+10     	; 0x1f94 <__floatsisf+0x6c>
    1f8a:	9a 95       	dec	r25
    1f8c:	66 0f       	add	r22, r22
    1f8e:	77 1f       	adc	r23, r23
    1f90:	88 1f       	adc	r24, r24
    1f92:	da f7       	brpl	.-10     	; 0x1f8a <__floatsisf+0x62>
    1f94:	88 0f       	add	r24, r24
    1f96:	96 95       	lsr	r25
    1f98:	87 95       	ror	r24
    1f9a:	97 f9       	bld	r25, 7
    1f9c:	08 95       	ret

00001f9e <__fp_inf>:
    1f9e:	97 f9       	bld	r25, 7
    1fa0:	9f 67       	ori	r25, 0x7F	; 127
    1fa2:	80 e8       	ldi	r24, 0x80	; 128
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	08 95       	ret

00001faa <__fp_nan>:
    1faa:	9f ef       	ldi	r25, 0xFF	; 255
    1fac:	80 ec       	ldi	r24, 0xC0	; 192
    1fae:	08 95       	ret

00001fb0 <__fp_pscA>:
    1fb0:	00 24       	eor	r0, r0
    1fb2:	0a 94       	dec	r0
    1fb4:	16 16       	cp	r1, r22
    1fb6:	17 06       	cpc	r1, r23
    1fb8:	18 06       	cpc	r1, r24
    1fba:	09 06       	cpc	r0, r25
    1fbc:	08 95       	ret

00001fbe <__fp_pscB>:
    1fbe:	00 24       	eor	r0, r0
    1fc0:	0a 94       	dec	r0
    1fc2:	12 16       	cp	r1, r18
    1fc4:	13 06       	cpc	r1, r19
    1fc6:	14 06       	cpc	r1, r20
    1fc8:	05 06       	cpc	r0, r21
    1fca:	08 95       	ret

00001fcc <__fp_round>:
    1fcc:	09 2e       	mov	r0, r25
    1fce:	03 94       	inc	r0
    1fd0:	00 0c       	add	r0, r0
    1fd2:	11 f4       	brne	.+4      	; 0x1fd8 <__fp_round+0xc>
    1fd4:	88 23       	and	r24, r24
    1fd6:	52 f0       	brmi	.+20     	; 0x1fec <__fp_round+0x20>
    1fd8:	bb 0f       	add	r27, r27
    1fda:	40 f4       	brcc	.+16     	; 0x1fec <__fp_round+0x20>
    1fdc:	bf 2b       	or	r27, r31
    1fde:	11 f4       	brne	.+4      	; 0x1fe4 <__fp_round+0x18>
    1fe0:	60 ff       	sbrs	r22, 0
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <__fp_round+0x20>
    1fe4:	6f 5f       	subi	r22, 0xFF	; 255
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fea:	9f 4f       	sbci	r25, 0xFF	; 255
    1fec:	08 95       	ret

00001fee <__fp_split3>:
    1fee:	57 fd       	sbrc	r21, 7
    1ff0:	90 58       	subi	r25, 0x80	; 128
    1ff2:	44 0f       	add	r20, r20
    1ff4:	55 1f       	adc	r21, r21
    1ff6:	59 f0       	breq	.+22     	; 0x200e <__fp_splitA+0x10>
    1ff8:	5f 3f       	cpi	r21, 0xFF	; 255
    1ffa:	71 f0       	breq	.+28     	; 0x2018 <__fp_splitA+0x1a>
    1ffc:	47 95       	ror	r20

00001ffe <__fp_splitA>:
    1ffe:	88 0f       	add	r24, r24
    2000:	97 fb       	bst	r25, 7
    2002:	99 1f       	adc	r25, r25
    2004:	61 f0       	breq	.+24     	; 0x201e <__fp_splitA+0x20>
    2006:	9f 3f       	cpi	r25, 0xFF	; 255
    2008:	79 f0       	breq	.+30     	; 0x2028 <__fp_splitA+0x2a>
    200a:	87 95       	ror	r24
    200c:	08 95       	ret
    200e:	12 16       	cp	r1, r18
    2010:	13 06       	cpc	r1, r19
    2012:	14 06       	cpc	r1, r20
    2014:	55 1f       	adc	r21, r21
    2016:	f2 cf       	rjmp	.-28     	; 0x1ffc <__fp_split3+0xe>
    2018:	46 95       	lsr	r20
    201a:	f1 df       	rcall	.-30     	; 0x1ffe <__fp_splitA>
    201c:	08 c0       	rjmp	.+16     	; 0x202e <__fp_splitA+0x30>
    201e:	16 16       	cp	r1, r22
    2020:	17 06       	cpc	r1, r23
    2022:	18 06       	cpc	r1, r24
    2024:	99 1f       	adc	r25, r25
    2026:	f1 cf       	rjmp	.-30     	; 0x200a <__fp_splitA+0xc>
    2028:	86 95       	lsr	r24
    202a:	71 05       	cpc	r23, r1
    202c:	61 05       	cpc	r22, r1
    202e:	08 94       	sec
    2030:	08 95       	ret

00002032 <__fp_zero>:
    2032:	e8 94       	clt

00002034 <__fp_szero>:
    2034:	bb 27       	eor	r27, r27
    2036:	66 27       	eor	r22, r22
    2038:	77 27       	eor	r23, r23
    203a:	cb 01       	movw	r24, r22
    203c:	97 f9       	bld	r25, 7
    203e:	08 95       	ret

00002040 <__gesf2>:
    2040:	0e 94 92 10 	call	0x2124	; 0x2124 <__fp_cmp>
    2044:	08 f4       	brcc	.+2      	; 0x2048 <__gesf2+0x8>
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	08 95       	ret

0000204a <__mulsf3>:
    204a:	0e 94 38 10 	call	0x2070	; 0x2070 <__mulsf3x>
    204e:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__fp_round>
    2052:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fp_pscA>
    2056:	38 f0       	brcs	.+14     	; 0x2066 <__mulsf3+0x1c>
    2058:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fp_pscB>
    205c:	20 f0       	brcs	.+8      	; 0x2066 <__mulsf3+0x1c>
    205e:	95 23       	and	r25, r21
    2060:	11 f0       	breq	.+4      	; 0x2066 <__mulsf3+0x1c>
    2062:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__fp_inf>
    2066:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__fp_nan>
    206a:	11 24       	eor	r1, r1
    206c:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__fp_szero>

00002070 <__mulsf3x>:
    2070:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fp_split3>
    2074:	70 f3       	brcs	.-36     	; 0x2052 <__mulsf3+0x8>

00002076 <__mulsf3_pse>:
    2076:	95 9f       	mul	r25, r21
    2078:	c1 f3       	breq	.-16     	; 0x206a <__mulsf3+0x20>
    207a:	95 0f       	add	r25, r21
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	55 1f       	adc	r21, r21
    2080:	62 9f       	mul	r22, r18
    2082:	f0 01       	movw	r30, r0
    2084:	72 9f       	mul	r23, r18
    2086:	bb 27       	eor	r27, r27
    2088:	f0 0d       	add	r31, r0
    208a:	b1 1d       	adc	r27, r1
    208c:	63 9f       	mul	r22, r19
    208e:	aa 27       	eor	r26, r26
    2090:	f0 0d       	add	r31, r0
    2092:	b1 1d       	adc	r27, r1
    2094:	aa 1f       	adc	r26, r26
    2096:	64 9f       	mul	r22, r20
    2098:	66 27       	eor	r22, r22
    209a:	b0 0d       	add	r27, r0
    209c:	a1 1d       	adc	r26, r1
    209e:	66 1f       	adc	r22, r22
    20a0:	82 9f       	mul	r24, r18
    20a2:	22 27       	eor	r18, r18
    20a4:	b0 0d       	add	r27, r0
    20a6:	a1 1d       	adc	r26, r1
    20a8:	62 1f       	adc	r22, r18
    20aa:	73 9f       	mul	r23, r19
    20ac:	b0 0d       	add	r27, r0
    20ae:	a1 1d       	adc	r26, r1
    20b0:	62 1f       	adc	r22, r18
    20b2:	83 9f       	mul	r24, r19
    20b4:	a0 0d       	add	r26, r0
    20b6:	61 1d       	adc	r22, r1
    20b8:	22 1f       	adc	r18, r18
    20ba:	74 9f       	mul	r23, r20
    20bc:	33 27       	eor	r19, r19
    20be:	a0 0d       	add	r26, r0
    20c0:	61 1d       	adc	r22, r1
    20c2:	23 1f       	adc	r18, r19
    20c4:	84 9f       	mul	r24, r20
    20c6:	60 0d       	add	r22, r0
    20c8:	21 1d       	adc	r18, r1
    20ca:	82 2f       	mov	r24, r18
    20cc:	76 2f       	mov	r23, r22
    20ce:	6a 2f       	mov	r22, r26
    20d0:	11 24       	eor	r1, r1
    20d2:	9f 57       	subi	r25, 0x7F	; 127
    20d4:	50 40       	sbci	r21, 0x00	; 0
    20d6:	9a f0       	brmi	.+38     	; 0x20fe <__mulsf3_pse+0x88>
    20d8:	f1 f0       	breq	.+60     	; 0x2116 <__mulsf3_pse+0xa0>
    20da:	88 23       	and	r24, r24
    20dc:	4a f0       	brmi	.+18     	; 0x20f0 <__mulsf3_pse+0x7a>
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	bb 1f       	adc	r27, r27
    20e4:	66 1f       	adc	r22, r22
    20e6:	77 1f       	adc	r23, r23
    20e8:	88 1f       	adc	r24, r24
    20ea:	91 50       	subi	r25, 0x01	; 1
    20ec:	50 40       	sbci	r21, 0x00	; 0
    20ee:	a9 f7       	brne	.-22     	; 0x20da <__mulsf3_pse+0x64>
    20f0:	9e 3f       	cpi	r25, 0xFE	; 254
    20f2:	51 05       	cpc	r21, r1
    20f4:	80 f0       	brcs	.+32     	; 0x2116 <__mulsf3_pse+0xa0>
    20f6:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__fp_inf>
    20fa:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__fp_szero>
    20fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2100:	e4 f3       	brlt	.-8      	; 0x20fa <__mulsf3_pse+0x84>
    2102:	98 3e       	cpi	r25, 0xE8	; 232
    2104:	d4 f3       	brlt	.-12     	; 0x20fa <__mulsf3_pse+0x84>
    2106:	86 95       	lsr	r24
    2108:	77 95       	ror	r23
    210a:	67 95       	ror	r22
    210c:	b7 95       	ror	r27
    210e:	f7 95       	ror	r31
    2110:	e7 95       	ror	r30
    2112:	9f 5f       	subi	r25, 0xFF	; 255
    2114:	c1 f7       	brne	.-16     	; 0x2106 <__mulsf3_pse+0x90>
    2116:	fe 2b       	or	r31, r30
    2118:	88 0f       	add	r24, r24
    211a:	91 1d       	adc	r25, r1
    211c:	96 95       	lsr	r25
    211e:	87 95       	ror	r24
    2120:	97 f9       	bld	r25, 7
    2122:	08 95       	ret

00002124 <__fp_cmp>:
    2124:	99 0f       	add	r25, r25
    2126:	00 08       	sbc	r0, r0
    2128:	55 0f       	add	r21, r21
    212a:	aa 0b       	sbc	r26, r26
    212c:	e0 e8       	ldi	r30, 0x80	; 128
    212e:	fe ef       	ldi	r31, 0xFE	; 254
    2130:	16 16       	cp	r1, r22
    2132:	17 06       	cpc	r1, r23
    2134:	e8 07       	cpc	r30, r24
    2136:	f9 07       	cpc	r31, r25
    2138:	c0 f0       	brcs	.+48     	; 0x216a <__fp_cmp+0x46>
    213a:	12 16       	cp	r1, r18
    213c:	13 06       	cpc	r1, r19
    213e:	e4 07       	cpc	r30, r20
    2140:	f5 07       	cpc	r31, r21
    2142:	98 f0       	brcs	.+38     	; 0x216a <__fp_cmp+0x46>
    2144:	62 1b       	sub	r22, r18
    2146:	73 0b       	sbc	r23, r19
    2148:	84 0b       	sbc	r24, r20
    214a:	95 0b       	sbc	r25, r21
    214c:	39 f4       	brne	.+14     	; 0x215c <__fp_cmp+0x38>
    214e:	0a 26       	eor	r0, r26
    2150:	61 f0       	breq	.+24     	; 0x216a <__fp_cmp+0x46>
    2152:	23 2b       	or	r18, r19
    2154:	24 2b       	or	r18, r20
    2156:	25 2b       	or	r18, r21
    2158:	21 f4       	brne	.+8      	; 0x2162 <__fp_cmp+0x3e>
    215a:	08 95       	ret
    215c:	0a 26       	eor	r0, r26
    215e:	09 f4       	brne	.+2      	; 0x2162 <__fp_cmp+0x3e>
    2160:	a1 40       	sbci	r26, 0x01	; 1
    2162:	a6 95       	lsr	r26
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	81 1d       	adc	r24, r1
    2168:	81 1d       	adc	r24, r1
    216a:	08 95       	ret

0000216c <__udivmodsi4>:
    216c:	a1 e2       	ldi	r26, 0x21	; 33
    216e:	1a 2e       	mov	r1, r26
    2170:	aa 1b       	sub	r26, r26
    2172:	bb 1b       	sub	r27, r27
    2174:	fd 01       	movw	r30, r26
    2176:	0d c0       	rjmp	.+26     	; 0x2192 <__udivmodsi4_ep>

00002178 <__udivmodsi4_loop>:
    2178:	aa 1f       	adc	r26, r26
    217a:	bb 1f       	adc	r27, r27
    217c:	ee 1f       	adc	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	a2 17       	cp	r26, r18
    2182:	b3 07       	cpc	r27, r19
    2184:	e4 07       	cpc	r30, r20
    2186:	f5 07       	cpc	r31, r21
    2188:	20 f0       	brcs	.+8      	; 0x2192 <__udivmodsi4_ep>
    218a:	a2 1b       	sub	r26, r18
    218c:	b3 0b       	sbc	r27, r19
    218e:	e4 0b       	sbc	r30, r20
    2190:	f5 0b       	sbc	r31, r21

00002192 <__udivmodsi4_ep>:
    2192:	66 1f       	adc	r22, r22
    2194:	77 1f       	adc	r23, r23
    2196:	88 1f       	adc	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	1a 94       	dec	r1
    219c:	69 f7       	brne	.-38     	; 0x2178 <__udivmodsi4_loop>
    219e:	60 95       	com	r22
    21a0:	70 95       	com	r23
    21a2:	80 95       	com	r24
    21a4:	90 95       	com	r25
    21a6:	9b 01       	movw	r18, r22
    21a8:	ac 01       	movw	r20, r24
    21aa:	bd 01       	movw	r22, r26
    21ac:	cf 01       	movw	r24, r30
    21ae:	08 95       	ret

000021b0 <malloc>:
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	82 30       	cpi	r24, 0x02	; 2
    21ba:	91 05       	cpc	r25, r1
    21bc:	10 f4       	brcc	.+4      	; 0x21c2 <malloc+0x12>
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	e0 91 1d 06 	lds	r30, 0x061D	; 0x80061d <__flp>
    21c6:	f0 91 1e 06 	lds	r31, 0x061E	; 0x80061e <__flp+0x1>
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	a0 e0       	ldi	r26, 0x00	; 0
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	30 97       	sbiw	r30, 0x00	; 0
    21d4:	19 f1       	breq	.+70     	; 0x221c <malloc+0x6c>
    21d6:	40 81       	ld	r20, Z
    21d8:	51 81       	ldd	r21, Z+1	; 0x01
    21da:	02 81       	ldd	r16, Z+2	; 0x02
    21dc:	13 81       	ldd	r17, Z+3	; 0x03
    21de:	48 17       	cp	r20, r24
    21e0:	59 07       	cpc	r21, r25
    21e2:	c8 f0       	brcs	.+50     	; 0x2216 <malloc+0x66>
    21e4:	84 17       	cp	r24, r20
    21e6:	95 07       	cpc	r25, r21
    21e8:	69 f4       	brne	.+26     	; 0x2204 <malloc+0x54>
    21ea:	10 97       	sbiw	r26, 0x00	; 0
    21ec:	31 f0       	breq	.+12     	; 0x21fa <malloc+0x4a>
    21ee:	12 96       	adiw	r26, 0x02	; 2
    21f0:	0c 93       	st	X, r16
    21f2:	12 97       	sbiw	r26, 0x02	; 2
    21f4:	13 96       	adiw	r26, 0x03	; 3
    21f6:	1c 93       	st	X, r17
    21f8:	27 c0       	rjmp	.+78     	; 0x2248 <malloc+0x98>
    21fa:	00 93 1d 06 	sts	0x061D, r16	; 0x80061d <__flp>
    21fe:	10 93 1e 06 	sts	0x061E, r17	; 0x80061e <__flp+0x1>
    2202:	22 c0       	rjmp	.+68     	; 0x2248 <malloc+0x98>
    2204:	21 15       	cp	r18, r1
    2206:	31 05       	cpc	r19, r1
    2208:	19 f0       	breq	.+6      	; 0x2210 <malloc+0x60>
    220a:	42 17       	cp	r20, r18
    220c:	53 07       	cpc	r21, r19
    220e:	18 f4       	brcc	.+6      	; 0x2216 <malloc+0x66>
    2210:	9a 01       	movw	r18, r20
    2212:	bd 01       	movw	r22, r26
    2214:	ef 01       	movw	r28, r30
    2216:	df 01       	movw	r26, r30
    2218:	f8 01       	movw	r30, r16
    221a:	db cf       	rjmp	.-74     	; 0x21d2 <malloc+0x22>
    221c:	21 15       	cp	r18, r1
    221e:	31 05       	cpc	r19, r1
    2220:	f9 f0       	breq	.+62     	; 0x2260 <malloc+0xb0>
    2222:	28 1b       	sub	r18, r24
    2224:	39 0b       	sbc	r19, r25
    2226:	24 30       	cpi	r18, 0x04	; 4
    2228:	31 05       	cpc	r19, r1
    222a:	80 f4       	brcc	.+32     	; 0x224c <malloc+0x9c>
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	61 15       	cp	r22, r1
    2232:	71 05       	cpc	r23, r1
    2234:	21 f0       	breq	.+8      	; 0x223e <malloc+0x8e>
    2236:	fb 01       	movw	r30, r22
    2238:	93 83       	std	Z+3, r25	; 0x03
    223a:	82 83       	std	Z+2, r24	; 0x02
    223c:	04 c0       	rjmp	.+8      	; 0x2246 <malloc+0x96>
    223e:	90 93 1e 06 	sts	0x061E, r25	; 0x80061e <__flp+0x1>
    2242:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <__flp>
    2246:	fe 01       	movw	r30, r28
    2248:	32 96       	adiw	r30, 0x02	; 2
    224a:	44 c0       	rjmp	.+136    	; 0x22d4 <malloc+0x124>
    224c:	fe 01       	movw	r30, r28
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	81 93       	st	Z+, r24
    2254:	91 93       	st	Z+, r25
    2256:	22 50       	subi	r18, 0x02	; 2
    2258:	31 09       	sbc	r19, r1
    225a:	39 83       	std	Y+1, r19	; 0x01
    225c:	28 83       	st	Y, r18
    225e:	3a c0       	rjmp	.+116    	; 0x22d4 <malloc+0x124>
    2260:	20 91 1b 06 	lds	r18, 0x061B	; 0x80061b <__brkval>
    2264:	30 91 1c 06 	lds	r19, 0x061C	; 0x80061c <__brkval+0x1>
    2268:	23 2b       	or	r18, r19
    226a:	41 f4       	brne	.+16     	; 0x227c <malloc+0xcc>
    226c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2270:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2274:	30 93 1c 06 	sts	0x061C, r19	; 0x80061c <__brkval+0x1>
    2278:	20 93 1b 06 	sts	0x061B, r18	; 0x80061b <__brkval>
    227c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2280:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2284:	21 15       	cp	r18, r1
    2286:	31 05       	cpc	r19, r1
    2288:	41 f4       	brne	.+16     	; 0x229a <malloc+0xea>
    228a:	2d b7       	in	r18, 0x3d	; 61
    228c:	3e b7       	in	r19, 0x3e	; 62
    228e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2292:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2296:	24 1b       	sub	r18, r20
    2298:	35 0b       	sbc	r19, r21
    229a:	e0 91 1b 06 	lds	r30, 0x061B	; 0x80061b <__brkval>
    229e:	f0 91 1c 06 	lds	r31, 0x061C	; 0x80061c <__brkval+0x1>
    22a2:	e2 17       	cp	r30, r18
    22a4:	f3 07       	cpc	r31, r19
    22a6:	a0 f4       	brcc	.+40     	; 0x22d0 <malloc+0x120>
    22a8:	2e 1b       	sub	r18, r30
    22aa:	3f 0b       	sbc	r19, r31
    22ac:	28 17       	cp	r18, r24
    22ae:	39 07       	cpc	r19, r25
    22b0:	78 f0       	brcs	.+30     	; 0x22d0 <malloc+0x120>
    22b2:	ac 01       	movw	r20, r24
    22b4:	4e 5f       	subi	r20, 0xFE	; 254
    22b6:	5f 4f       	sbci	r21, 0xFF	; 255
    22b8:	24 17       	cp	r18, r20
    22ba:	35 07       	cpc	r19, r21
    22bc:	48 f0       	brcs	.+18     	; 0x22d0 <malloc+0x120>
    22be:	4e 0f       	add	r20, r30
    22c0:	5f 1f       	adc	r21, r31
    22c2:	50 93 1c 06 	sts	0x061C, r21	; 0x80061c <__brkval+0x1>
    22c6:	40 93 1b 06 	sts	0x061B, r20	; 0x80061b <__brkval>
    22ca:	81 93       	st	Z+, r24
    22cc:	91 93       	st	Z+, r25
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <malloc+0x124>
    22d0:	e0 e0       	ldi	r30, 0x00	; 0
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	cf 01       	movw	r24, r30
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <free>:
    22e0:	cf 93       	push	r28
    22e2:	df 93       	push	r29
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	09 f4       	brne	.+2      	; 0x22ea <free+0xa>
    22e8:	81 c0       	rjmp	.+258    	; 0x23ec <free+0x10c>
    22ea:	fc 01       	movw	r30, r24
    22ec:	32 97       	sbiw	r30, 0x02	; 2
    22ee:	13 82       	std	Z+3, r1	; 0x03
    22f0:	12 82       	std	Z+2, r1	; 0x02
    22f2:	a0 91 1d 06 	lds	r26, 0x061D	; 0x80061d <__flp>
    22f6:	b0 91 1e 06 	lds	r27, 0x061E	; 0x80061e <__flp+0x1>
    22fa:	10 97       	sbiw	r26, 0x00	; 0
    22fc:	81 f4       	brne	.+32     	; 0x231e <free+0x3e>
    22fe:	20 81       	ld	r18, Z
    2300:	31 81       	ldd	r19, Z+1	; 0x01
    2302:	82 0f       	add	r24, r18
    2304:	93 1f       	adc	r25, r19
    2306:	20 91 1b 06 	lds	r18, 0x061B	; 0x80061b <__brkval>
    230a:	30 91 1c 06 	lds	r19, 0x061C	; 0x80061c <__brkval+0x1>
    230e:	28 17       	cp	r18, r24
    2310:	39 07       	cpc	r19, r25
    2312:	51 f5       	brne	.+84     	; 0x2368 <free+0x88>
    2314:	f0 93 1c 06 	sts	0x061C, r31	; 0x80061c <__brkval+0x1>
    2318:	e0 93 1b 06 	sts	0x061B, r30	; 0x80061b <__brkval>
    231c:	67 c0       	rjmp	.+206    	; 0x23ec <free+0x10c>
    231e:	ed 01       	movw	r28, r26
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	ce 17       	cp	r28, r30
    2326:	df 07       	cpc	r29, r31
    2328:	40 f4       	brcc	.+16     	; 0x233a <free+0x5a>
    232a:	4a 81       	ldd	r20, Y+2	; 0x02
    232c:	5b 81       	ldd	r21, Y+3	; 0x03
    232e:	9e 01       	movw	r18, r28
    2330:	41 15       	cp	r20, r1
    2332:	51 05       	cpc	r21, r1
    2334:	f1 f0       	breq	.+60     	; 0x2372 <free+0x92>
    2336:	ea 01       	movw	r28, r20
    2338:	f5 cf       	rjmp	.-22     	; 0x2324 <free+0x44>
    233a:	d3 83       	std	Z+3, r29	; 0x03
    233c:	c2 83       	std	Z+2, r28	; 0x02
    233e:	40 81       	ld	r20, Z
    2340:	51 81       	ldd	r21, Z+1	; 0x01
    2342:	84 0f       	add	r24, r20
    2344:	95 1f       	adc	r25, r21
    2346:	c8 17       	cp	r28, r24
    2348:	d9 07       	cpc	r29, r25
    234a:	59 f4       	brne	.+22     	; 0x2362 <free+0x82>
    234c:	88 81       	ld	r24, Y
    234e:	99 81       	ldd	r25, Y+1	; 0x01
    2350:	84 0f       	add	r24, r20
    2352:	95 1f       	adc	r25, r21
    2354:	02 96       	adiw	r24, 0x02	; 2
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	9b 81       	ldd	r25, Y+3	; 0x03
    235e:	93 83       	std	Z+3, r25	; 0x03
    2360:	82 83       	std	Z+2, r24	; 0x02
    2362:	21 15       	cp	r18, r1
    2364:	31 05       	cpc	r19, r1
    2366:	29 f4       	brne	.+10     	; 0x2372 <free+0x92>
    2368:	f0 93 1e 06 	sts	0x061E, r31	; 0x80061e <__flp+0x1>
    236c:	e0 93 1d 06 	sts	0x061D, r30	; 0x80061d <__flp>
    2370:	3d c0       	rjmp	.+122    	; 0x23ec <free+0x10c>
    2372:	e9 01       	movw	r28, r18
    2374:	fb 83       	std	Y+3, r31	; 0x03
    2376:	ea 83       	std	Y+2, r30	; 0x02
    2378:	49 91       	ld	r20, Y+
    237a:	59 91       	ld	r21, Y+
    237c:	c4 0f       	add	r28, r20
    237e:	d5 1f       	adc	r29, r21
    2380:	ec 17       	cp	r30, r28
    2382:	fd 07       	cpc	r31, r29
    2384:	61 f4       	brne	.+24     	; 0x239e <free+0xbe>
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	84 0f       	add	r24, r20
    238c:	95 1f       	adc	r25, r21
    238e:	02 96       	adiw	r24, 0x02	; 2
    2390:	e9 01       	movw	r28, r18
    2392:	99 83       	std	Y+1, r25	; 0x01
    2394:	88 83       	st	Y, r24
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	9b 83       	std	Y+3, r25	; 0x03
    239c:	8a 83       	std	Y+2, r24	; 0x02
    239e:	e0 e0       	ldi	r30, 0x00	; 0
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	12 96       	adiw	r26, 0x02	; 2
    23a4:	8d 91       	ld	r24, X+
    23a6:	9c 91       	ld	r25, X
    23a8:	13 97       	sbiw	r26, 0x03	; 3
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	19 f0       	breq	.+6      	; 0x23b4 <free+0xd4>
    23ae:	fd 01       	movw	r30, r26
    23b0:	dc 01       	movw	r26, r24
    23b2:	f7 cf       	rjmp	.-18     	; 0x23a2 <free+0xc2>
    23b4:	8d 91       	ld	r24, X+
    23b6:	9c 91       	ld	r25, X
    23b8:	11 97       	sbiw	r26, 0x01	; 1
    23ba:	9d 01       	movw	r18, r26
    23bc:	2e 5f       	subi	r18, 0xFE	; 254
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	82 0f       	add	r24, r18
    23c2:	93 1f       	adc	r25, r19
    23c4:	20 91 1b 06 	lds	r18, 0x061B	; 0x80061b <__brkval>
    23c8:	30 91 1c 06 	lds	r19, 0x061C	; 0x80061c <__brkval+0x1>
    23cc:	28 17       	cp	r18, r24
    23ce:	39 07       	cpc	r19, r25
    23d0:	69 f4       	brne	.+26     	; 0x23ec <free+0x10c>
    23d2:	30 97       	sbiw	r30, 0x00	; 0
    23d4:	29 f4       	brne	.+10     	; 0x23e0 <free+0x100>
    23d6:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__flp+0x1>
    23da:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <__flp>
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <free+0x104>
    23e0:	13 82       	std	Z+3, r1	; 0x03
    23e2:	12 82       	std	Z+2, r1	; 0x02
    23e4:	b0 93 1c 06 	sts	0x061C, r27	; 0x80061c <__brkval+0x1>
    23e8:	a0 93 1b 06 	sts	0x061B, r26	; 0x80061b <__brkval>
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	08 95       	ret

000023f2 <_exit>:
    23f2:	f8 94       	cli

000023f4 <__stop_program>:
    23f4:	ff cf       	rjmp	.-2      	; 0x23f4 <__stop_program>
